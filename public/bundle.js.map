{
  "version": 3,
  "sources": ["../src/Tag.ts", "../src/Canvas.ts", "../src/game/Entity.ts", "../src/Styles.ts", "../src/Window.ts", "../src/Application.ts", "../src/game/Button.ts", "../src/game/buttons/ChallengeBtn.ts", "../src/game/buttons/ChallengesBtn.ts", "../src/game/buttons/EndChallengeBtn.ts", "../src/game/buttons/epoch/EpochUpgrade.ts", "../src/game/buttons/epoch/CostMultiplier.ts", "../src/game/buttons/epoch/PenetrationChance.ts", "../src/game/Collider.ts", "../src/game/components/Decoration.ts", "../src/game/components/ui/Decoration.ts", "../src/game/components/ui/PlanetHit.ts", "../src/game/components/ui/Rocket.ts", "../src/game/components/Explosion.ts", "../src/game/components/ui/Explosion.ts", "../src/game/components/PlanetHit.ts", "../src/game/components/Rocket.ts", "../src/game/components/Planet.ts", "../src/game/buttons/epoch/PlanetResetUpgrade.ts", "../src/game/buttons/epoch/PowerMultiplier.ts", "../src/game/buttons/epoch/ScoreMultiplier.ts", "../src/game/buttons/epoch/TimeMultiplier.ts", "../src/game/buttons/EpochBtn.ts", "../src/game/buttons/NewEpochBtn.ts", "../src/game/buttons/PlayBtn.ts", "../src/game/buttons/rockets/RocketBtn.ts", "../src/game/buttons/rockets/RocketLayers.ts", "../src/game/buttons/StartEpochBtn.ts", "../src/game/buttons/upgrade/Upgrade.ts", "../src/game/buttons/upgrade/GravityUpgrade.ts", "../src/game/buttons/upgrade/LessIntervalUpgrade.ts", "../src/game/buttons/upgrade/PowerUpgrade.ts", "../src/game/buttons/upgrade/SpeedUpgrade.ts", "../src/game/components/Overlay.ts", "../src/game/challenges/Challenge.ts", "../src/game/challenges/ActiveChallenge.ts", "../src/game/challenges/EpochChallenge.ts", "../src/game/challenges/OfflineChallenge.ts", "../src/game/Epoch.ts", "../src/game/saves/Save.ts", "../src/game/Game.ts", "../src/game/Achievement.ts", "../src/game/components/Target.ts", "../src/game/components/ui/Overlay.ts", "../src/game/components/ui/Planet.ts", "../src/game/components/ui/Target.ts", "../src/index.ts"],
  "sourcesContent": ["export default class Tag<T extends HTMLElement> {\r\n    protected html: T;\r\n    protected parent: Node | null = null;\r\n\r\n    public constructor(name: keyof HTMLElementTagNameMap) {\r\n        this.html = document.createElement(name) as T;\r\n    }\r\n\r\n    public setParent(parent: Node | null) {\r\n        if (parent) {\r\n            parent.appendChild(this.html);\r\n        } else {\r\n            this.parent?.removeChild(this.html);\r\n        }\r\n        this.parent = parent;\r\n    }\r\n}", "import Tag from './Tag';\r\n\r\nexport const enum CursorStyle {\r\n    Default = 'default',\r\n    Pointer = 'pointer'\r\n}\r\n\r\nexport default class Canvas extends Tag<HTMLCanvasElement> {\r\n    public cachedWidth: number = 0;\r\n    public cachedHeight: number = 0;\r\n    public windowScale: number = 1;\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    public constructor() {\r\n        super('canvas');\r\n        this.ctx = this.html.getContext('2d') as CanvasRenderingContext2D;\r\n        this.html.addEventListener('contextmenu', e => e.preventDefault());\r\n    }\r\n\r\n    public resize(width: number, height: number, ratio: number) {\r\n        width *= ratio;\r\n        height *= ratio;\r\n\r\n        this.html.width = this.cachedWidth = width;\r\n        this.html.height = this.cachedHeight = height;\r\n\r\n        this.windowScale = Math.max(width / 1920, height / 1080);\r\n    }\r\n\r\n    public setCursorStyle(style: CursorStyle) {\r\n        this.html.style.cursor = style;\r\n    }\r\n}", "import Application from '../Application';\r\nimport Component from './components/Component';\r\nimport { Order } from './Order';\r\n\r\nexport default class Entity<T extends Record<string, Component> = {}> {\r\n    private readonly components = {} as T;\r\n    public zOrder = Order.Default;\r\n    public destroyed = false;\r\n\r\n    public constructor(public readonly app: Application, components: Record<string, Component>) {\r\n        let keys = Object.keys(components);\r\n        for (let i = 0, l = keys.length; i < l; ++i) {\r\n            let comp = components[keys[i]];\r\n            comp.init(this);\r\n            (this as any).components[keys[i]] = comp;\r\n        }\r\n    }\r\n\r\n    public getComponent<S extends keyof T>(name: S): T[S] {\r\n        return this.components[name] as T[S];\r\n    }\r\n\r\n    public cleanup() {\r\n        for (let name in this.components) {\r\n            delete this.components[name];\r\n        }\r\n    }\r\n\r\n    public destroy() {\r\n        this.destroyed = true;\r\n    }\r\n}", "import Tag from './Tag';\r\n\r\nexport default class Styles extends Tag<HTMLStyleElement> {\r\n    public constructor() {\r\n        super('style');\r\n\r\n        this.addStyle('body', { margin: 0, overflow: 'hidden' });\r\n        this.addStyle('canvas', { width: '100vw', height: '100vh' });\r\n        this.addStyle('@font-face', { fontFamily: 'Ubuntu', src: 'url(./Ubuntu.ttf)' });\r\n    }\r\n\r\n    public addStyle(name: string, styles: Record<string, { toString: () => string }>) {\r\n        this.html.innerHTML += name + '{' +\r\n            Object.keys(styles)\r\n                .map(\r\n                    key => key + ':' + styles[key].toString()\r\n                )\r\n                .join(';')\r\n            + '}';\r\n    }\r\n}", "import Canvas from './Canvas';\r\nimport Styles from './Styles';\r\n\r\nexport default class Window {\r\n    public readonly canvas = new Canvas();\r\n    public readonly styles = new Styles();\r\n\r\n    public constructor() {\r\n        this.canvas.setParent(document.body);\r\n        this.styles.setParent(document.head);\r\n    }\r\n}", "import { CursorStyle } from './Canvas';\r\nimport Component from './game/components/Component';\r\nimport { UI, UIContext } from './game/components/ui/UI';\r\nimport Entity from './game/Entity';\r\nimport Window from './Window';\r\n\r\nexport default class Application {\r\n    public static readonly now = 'performance' in window && 'now' in performance ? performance.now.bind(performance) : Date.now;\r\n    public readonly window = new Window();\r\n    public entities = new Set<Entity<{ base?: Component, ui?: UI }>>();\r\n    public dt = 0.0001; // 0 may cause NaN\r\n    public backgroundColor: `#${string}` = '#777';\r\n    public shakePower = 0;\r\n\r\n    private readonly cachedGameLoop: () => void = this.gameLoop.bind(this);\r\n    private readonly cachedCanvasResize = () => this.window.canvas.resize(window.innerWidth, window.innerHeight, window.devicePixelRatio);\r\n    private lastTime = 0; // checked in gameLoop\r\n    private entitiesSorted = false;\r\n\r\n    private gameLoop() {\r\n        let now = Application.now();\r\n        if (this.lastTime) {\r\n            this.dt = Math.min(1000 / 30, now - this.lastTime) / 1000;\r\n        }\r\n        this.lastTime = now;\r\n\r\n        if (!this.entitiesSorted) {\r\n            this.entities = new Set(Array.from(this.entities).sort((a, b) => a.zOrder - b.zOrder));\r\n            this.entitiesSorted = false;\r\n        }\r\n\r\n        let ctx = this.window.canvas.ctx,\r\n            canvas = this.window.canvas,\r\n            ui: UIContext = {\r\n                x: canvas.cachedWidth / 2,\r\n                y: canvas.cachedHeight / 2,\r\n                width: canvas.cachedWidth,\r\n                height: canvas.cachedHeight,\r\n                winScale: this.window.canvas.windowScale,\r\n                dt: this.dt\r\n            };\r\n\r\n        if (this.shakePower) {\r\n            ui.x += Math.random() * this.shakePower - this.shakePower / 2;\r\n            ui.y += Math.random() * this.shakePower - this.shakePower / 2;\r\n        }\r\n\r\n        ctx.fillStyle = this.backgroundColor;\r\n        ctx.fillRect(0, 0, canvas.cachedWidth, canvas.cachedHeight);\r\n\r\n        this.setCursorStyle(CursorStyle.Default);\r\n\r\n        for (let entity of Array.from(this.entities)) {\r\n            if (entity.destroyed) continue;\r\n            let entityBase = entity.getComponent('base'),\r\n                entityUI = entity.getComponent('ui');\r\n\r\n            // too lazy to make another interface\r\n            if (entityBase && 'update' in entityBase)\r\n                (entityBase as { update: (dt: number) => void }).update(this.dt);\r\n\r\n            if (entityUI) entityUI.render(ctx, ui);\r\n        }\r\n\r\n        for (let entity of this.entities) {\r\n            if (!entity.destroyed) continue;\r\n            entity.cleanup();\r\n            this.entities.delete(entity);\r\n        }\r\n\r\n        requestAnimationFrame(this.cachedGameLoop);\r\n    }\r\n\r\n    public run() {\r\n        window.addEventListener('resize', this.cachedCanvasResize);\r\n        window.addEventListener('focus', () => this.lastTime = Application.now());\r\n\r\n        this.cachedCanvasResize();\r\n        this.gameLoop();\r\n    }\r\n\r\n    public spawn<T extends Record<string, Component>>(components: T): Entity<T> {\r\n        let entity = new Entity<T>(this, components);\r\n        this.entities.add(entity);\r\n        this.entitiesSorted = false;\r\n        return entity;\r\n    }\r\n\r\n    public setCursorStyle(style: CursorStyle) {\r\n        this.window.canvas.setCursorStyle(style);\r\n    }\r\n}", "import { CursorStyle } from '../Canvas';\r\nimport { UIContext } from './components/ui/UI';\r\nimport Game from './Game';\r\n\r\nexport interface ButtonOptions {\r\n    offsetX: number,\r\n    offsetY: number,\r\n    screenX: number,\r\n    screenY: number,\r\n    width: number,\r\n    height: number,\r\n    fontSize: number,\r\n    fontColor: string,\r\n    strokeWidth: number,\r\n    strokeColor: string,\r\n    overStrokeColor: string,\r\n    pressStrokeColor: string,\r\n    rounding: number,\r\n    fillStyle: string\r\n}\r\n\r\nexport default abstract class Button {\r\n    public readonly options: ButtonOptions;\r\n    public mouseOver = false;\r\n    public isPressed = false;\r\n    public hidden = false;\r\n\r\n    private static readonly textCache = new Map<string, [TextMetrics, HTMLCanvasElement]>();\r\n    private clicked = false;\r\n\r\n    public constructor(public text: string, options: Partial<ButtonOptions>) {\r\n        this.options = Object.assign({\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            screenX: 0,\r\n            screenY: 0,\r\n            width: 150,\r\n            height: 50,\r\n            fontSize: 22,\r\n            fontColor: '#fff',\r\n            strokeWidth: 0,\r\n            strokeColor: '#fff',\r\n            overStrokeColor: '#fff',\r\n            pressStrokeColor: '#fff',\r\n            rounding: 0,\r\n            fillStyle: 'rgba(0,0,0,0.5)'\r\n        }, options);\r\n    }\r\n\r\n    public abstract onClick(): void;\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        if (this.hidden) return;\r\n\r\n        let opt = this.options,\r\n            measure = this.measure(ui);\r\n\r\n        this.update(ui.width, ui.height, ui.winScale, measure.width / 2);\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(measure.x, measure.y, measure.w, measure.h, measure.r);\r\n        ctx.closePath();\r\n\r\n        if (measure.width) {\r\n            ctx.strokeStyle = this.isPressed ? opt.pressStrokeColor : this.mouseOver ? opt.overStrokeColor : opt.strokeColor;\r\n            ctx.lineWidth = measure.width;\r\n            ctx.stroke();\r\n        }\r\n\r\n        ctx.fillStyle = opt.fillStyle\r\n        ctx.fill();\r\n\r\n        if (!this.options.fontSize) return;\r\n\r\n        let img = Button.getTextImageCached(this.text, opt.fontSize * ui.winScale, opt.fontColor);\r\n\r\n        ctx.drawImage(img[1], measure.x + measure.w / 2 - img[0].width / 2, measure.y + measure.h / 2 - opt.fontSize * ui.winScale / 2);\r\n    }\r\n\r\n    public update(width: number, height: number, scale: number, strokeWidth: number) {\r\n        this.mouseOver = this.isMouseOver(width, height, scale, strokeWidth);\r\n        this.isPressed = this.mouseOver && Game.mouse.click;\r\n\r\n        if (this.mouseOver) {\r\n            Game.instance!.app.setCursorStyle(CursorStyle.Pointer);\r\n            if (this.isPressed) {\r\n                this.clicked = true;\r\n            } else if (this.clicked) {\r\n                this.onClick();\r\n                this.clicked = false\r\n            }\r\n        } else {\r\n            this.clicked = false;\r\n        }\r\n    }\r\n\r\n    private isMouseOver(width: number, height: number, scale: number, strokeWidth: number): boolean {\r\n        let mouse = Game.mouse,\r\n            opt = this.options,\r\n            w = (opt.width / 2 + strokeWidth) * scale,\r\n            h = (opt.height / 2 + strokeWidth) * scale,\r\n            x = opt.offsetX * scale + opt.screenX * width,\r\n            y = opt.offsetY * scale + opt.screenY * height;\r\n\r\n        return (\r\n            mouse.x > x - w &&\r\n            mouse.x < x + w &&\r\n            mouse.y > y - h &&\r\n            mouse.y < y + h\r\n        );\r\n    }\r\n\r\n    protected measure(ui: UIContext) {\r\n        let opt = this.options,\r\n            w = opt.width * ui.winScale,\r\n            h = opt.height * ui.winScale;\r\n\r\n        return {\r\n            w, h,\r\n            x: opt.offsetX * ui.winScale + opt.screenX * ui.width - w / 2,\r\n            y: opt.offsetY * ui.winScale + opt.screenY * ui.height - h / 2,\r\n            r: opt.rounding * ui.winScale,\r\n            width: opt.strokeWidth * ui.winScale * 2\r\n        };\r\n    }\r\n\r\n    public static getTextImageCached(text: string, textSize: number, textColor: string): [TextMetrics, HTMLCanvasElement] {\r\n        let cache = Button.textCache.get(text + textSize + textColor);\r\n        if (cache) return cache;\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width = canvas.height = 1;\r\n        let ctx = canvas.getContext('2d')!;\r\n        ctx.font = `${textSize}px Ubuntu`;\r\n        let metrics = ctx.measureText(text);\r\n        canvas.width = metrics.width;\r\n        canvas.height = textSize;\r\n        ctx.font = `${textSize}px Ubuntu`;\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = textColor;\r\n        ctx.fillText(text, canvas.width / 2, canvas.height / 2);\r\n        let output = [metrics, canvas] as [TextMetrics, HTMLCanvasElement];\r\n        Button.textCache.set(text + textSize + textColor, output);\r\n        return output ;\r\n    }\r\n}", "import Button from '../Button';\r\nimport Challenge from '../challenges/Challenge';\r\nimport { UIContext } from '../components/ui/UI';\r\n\r\nexport default class ChallengeBtn extends Button {\r\n    public level = 0;\r\n\r\n    public constructor(public readonly challenge: Challenge) {\r\n        super('START', {\r\n            width: 120,\r\n            height: 40,\r\n            fontSize: 28,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(255, 55, 55)',\r\n            overStrokeColor: 'rgb(221, 61, 61)',\r\n            pressStrokeColor: 'rgb(255, 106, 106)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        let measure = this.measure(ui),\r\n            width = ui.width / 2,\r\n            textOffset = 20 * ui.winScale,\r\n            height = 60 * ui.winScale;\r\n\r\n        this.options.offsetX = width / 2 / ui.winScale;\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(\r\n            measure.x - 20 * ui.winScale,\r\n            measure.y - 20 * ui.winScale,\r\n            measure.w + width + 20 * ui.winScale,\r\n            measure.h + height,\r\n            16\r\n        );\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(42, 5, 5, 0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.textBaseline = 'middle';\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillText(this.challenge.name + ' Challenge ', measure.x + 140 * ui.winScale, measure.y + textOffset);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText(\r\n            this.challenge.completed\r\n                ? 'Completed in ' + this.challenge.completedTime!.toFixed(0) + 's'\r\n                : 'Uncompleted',\r\n            measure.x + width + 80 * ui.winScale, measure.y + textOffset * 1.5\r\n        );\r\n\r\n        ctx.font = 18 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.fillText(this.challenge.description + '. Reward: ' + this.challenge.reward, measure.x, measure.y + textOffset + 40 * ui.winScale);\r\n\r\n        super.render(ctx, ui);\r\n    }\r\n\r\n    public onClick(): void {\r\n        this.challenge.start();\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class ChallengesBtn extends Button {\r\n    public constructor() {\r\n        super('CHALLENGES', {\r\n            offsetX: -170,\r\n            offsetY: 40,\r\n            screenX: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'hsl(0, 64%, 71%)',\r\n            overStrokeColor: 'hsl(0, 100%, 86%)',\r\n            pressStrokeColor: 'hsl(0, 41.00%, 69.40%)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        Game.instance!.overlay.scene = Scene.Challenges;\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class EndChallengeBtn extends Button {\r\n    public constructor() {\r\n        super('END CHALLENGE', {\r\n            offsetX: -170,\r\n            offsetY: 80,\r\n            screenX: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(255, 55, 55)',\r\n            overStrokeColor: 'rgb(221, 61, 61)',\r\n            pressStrokeColor: 'rgb(255, 106, 106)',\r\n            rounding: 12\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n        game.epoch.currentChallenge?.end(false);\r\n        game.overlay.scene = Scene.Game;\r\n    }\r\n}", "import Button from '../../Button';\r\nimport { UIContext } from '../../components/ui/UI';\r\nimport Game from '../../Game';\r\nimport { ISave, Save } from '../../saves';\r\n\r\nexport default abstract class EpochUpgrade extends Button implements ISave {\r\n    public level = 0;\r\n\r\n    public constructor(public readonly name: string, text: string, public cost: number) {\r\n        super(text, {\r\n            width: 120,\r\n            height: 40,\r\n            fontSize: 28,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        let measure = this.measure(ui),\r\n            width = ui.width / 2,\r\n            textOffset = 20 * ui.winScale,\r\n            height = 60 * ui.winScale;\r\n\r\n        this.options.offsetX = width / 2 / ui.winScale;\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(\r\n            measure.x - 20 * ui.winScale,\r\n            measure.y - 20 * ui.winScale,\r\n            measure.w + width + 20 * ui.winScale,\r\n            measure.h + height,\r\n            16\r\n        );\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.textBaseline = 'middle';\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillText(this.name + ' Upgrade [' + this.level + ']', measure.x + 140 * ui.winScale, measure.y + textOffset);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText('Cost ' + Game.format(this.cost) + ' EP', measure.x + width + 80 * ui.winScale, measure.y + textOffset * 1.5);\r\n\r\n        ctx.font = 18 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.fillText(this.getDescription(), measure.x, measure.y + textOffset + 40 * ui.winScale);\r\n\r\n        super.render(ctx, ui);\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n\r\n        if (game.epoch.points < this.cost) return;\r\n        game.epoch.points -= this.cost;\r\n        this.onPurchase(game);\r\n        this.level += 1;\r\n    }\r\n\r\n    public abstract onPurchase(game: Game): void;\r\n    public abstract getDescription(): string;\r\n\r\n    public purchaseMany(game: Game, count: number) {\r\n        for (let i = 0; i < count; ++i)\r\n            this.onPurchase(game);\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(this.level);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        this.level = save.readU8();\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class CostMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Cost', 'x0.95', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.cost *= 0.95;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Decrease all rocket\\'s cost by 5% each upgrade. Current cost multiplier is ' + Game.instance!.epoch.multipliers.cost.toFixed(3);\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class PenetrationChance extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Penetration', '+1%', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        // fun fact: you can have more than 100% penetration\r\n        game.epoch.penetrationChance += 0.01;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Increase the change of rocket to penetrate the planet by 1%. Current penetration chance is ' + (Game.instance!.epoch.penetrationChance * 100).toFixed(0) + '%';\r\n    }\r\n}", "interface Circle {\r\n    x: number;\r\n    y: number;\r\n    radius: number;\r\n}\r\n\r\nexport default class Collider {\r\n    private data: Circle | null = null;\r\n\r\n    public update(data: Circle): void {\r\n        this.data = data;\r\n    }\r\n\r\n    public intersects(other: Collider, noRadius: boolean): boolean {\r\n        if (!this.data || !other.data) return false;\r\n        return Collider.circleIntersectCircle(this.data, other.data, noRadius);\r\n    }\r\n\r\n    private static circleIntersectCircle(c1: Circle, c2: Circle, noRadius: boolean): boolean {\r\n        let dx = c1.x - c2.x,\r\n            dy = c1.y - c2.y,\r\n            r = c1.radius + (noRadius ? 0 : c2.radius);\r\n        return dx * dx + dy * dy <= r * r;\r\n    }\r\n}", "import Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\n\r\nexport const enum DecorationType {\r\n    Hill,\r\n    Tree\r\n}\r\n\r\nexport default class Decoration implements Component {\r\n    public entity: Entity = null!;\r\n\r\n    public constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public size: number,\r\n        public angle: number,\r\n        public type: DecorationType\r\n    ) {}\r\n\r\n    public init(entity: Entity): void {\r\n        entity.zOrder = Order.Decoration;\r\n        this.entity = entity;\r\n        Game.instance!.decorations.push(this);\r\n    }\r\n}", "import Entity from '../../Entity';\nimport Game from '../../Game';\nimport Decoration, { DecorationType } from '../Decoration';\nimport { UI, UIContext } from './UI';\n\nexport default class DecorationUI implements UI {\r\n    private decoration: Decoration = null!;\r\n\r\n    public init(entity: Entity<{ base: Decoration }>): void {\r\n        this.decoration = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        let planet = Game.instance!.planet,\r\n            scale = ui.winScale / planet.scale,\r\n            size = this.decoration.size * scale;\r\n\r\n        ctx.translate(ui.x + this.decoration.x * ui.winScale, ui.y + this.decoration.y * ui.winScale);\r\n        if (this.decoration.type == DecorationType.Tree) ctx.rotate(this.decoration.angle);\r\n\r\n        ctx.fillStyle = planet.layers[0].color || '#ddd';\r\n\r\n        switch (this.decoration.type) {\r\n            case DecorationType.Hill:\r\n                ctx.beginPath();\r\n                ctx.arc(0, 0, this.decoration.size * scale, 0, 2 * Math.PI);\r\n                ctx.closePath();\r\n                ctx.fill();\r\n                break;\r\n            case DecorationType.Tree:\r\n                ctx.beginPath();\r\n                ctx.lineTo(size * 2, 0);\r\n                ctx.lineTo(-size * 0.1, size * 0.75);\r\n                ctx.lineTo(-size * 0.1, -size * 0.75);\r\n                ctx.closePath();\r\n                ctx.fill();\r\n                break;\r\n        }\r\n\r\n        ctx.resetTransform();\r\n    }\r\n}", "import Application from '../../../Application';\nimport Entity from '../../Entity';\nimport Game from '../../Game';\nimport PlanetHit from '../PlanetHit';\nimport { UI, UIContext } from './UI';\n\nexport default class PlanetHitUI implements UI {\r\n    private app: Application = null!;\r\n    private hit: PlanetHit = null!;\r\n\r\n    public init(entity: Entity<{ base: PlanetHit }>): void {\r\n        this.app = entity.app;\r\n        this.hit = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        let scale = Game.instance!.planet.scale;\r\n        ctx.beginPath();\r\n        ctx.arc(ui.x + this.hit.x * ui.winScale, ui.y + this.hit.y * ui.winScale, this.hit.size / scale * ui.winScale, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.app.backgroundColor;\r\n        ctx.fill();\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Rocket from '../Rocket';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport const enum RocketFlags {\r\n    None = 0,\r\n    Long = 1 << 0,\r\n    Sharp = 1 << 1,\r\n    Hammer = 1 << 2,\r\n    White = 1 << 3,\r\n    Triangle = 1 << 4,\r\n    Longer = 1 << 5\r\n}\r\n\r\nexport default class RocketUI implements UI {\r\n    public rocket: Rocket = null!;\r\n\r\n    init(entity: Entity<{ base: Rocket }>): void {\r\n        this.rocket = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        RocketUI.renderDummy(\r\n            ctx,\r\n            this.rocket.size * ui.winScale,\r\n            ui.x + this.rocket.x * ui.winScale,\r\n            ui.y + this.rocket.y * ui.winScale,\r\n            this.rocket.angle,\r\n            this.rocket.flags\r\n        );\r\n    }\r\n\r\n    public static renderDummy(ctx: CanvasRenderingContext2D, size: number, x: number, y: number, angle: number, flags: number) {\r\n        let long = (flags & RocketFlags.Long) != 0,\r\n            sharp = (flags & RocketFlags.Sharp) != 0,\r\n            hammer = (flags & RocketFlags.Hammer) != 0,\r\n            white = (flags & RocketFlags.White) != 0,\r\n            triangle = (flags & RocketFlags.Triangle) != 0,\r\n            longer = (flags & RocketFlags.Longer) != 0;\r\n\r\n        ctx.translate(x, y);\r\n        ctx.rotate(angle);\r\n\r\n        let h = 1;\r\n\r\n        if (long) h *= 1.25;\r\n        if (longer) h *= 1.5;\r\n\r\n        ctx.beginPath();\r\n        ctx.lineTo(size * 1.5 * h, 0);\r\n        ctx.lineTo(size * 0.4 * h, size * 0.75);\r\n        if (triangle) {}\r\n        else if (sharp) {\r\n            ctx.lineTo(-size * 0.4 * h, 0);\r\n        } else {\r\n            ctx.lineTo(-size * 0.75 * h, size * 0.75);\r\n            ctx.lineTo(-size * 2.25 * h, size * 1.5 * 0.75);\r\n            if (!hammer) ctx.lineTo(-size * 2 * h, 0);\r\n            ctx.lineTo(-size * 2.25 * h, -size * 1.5 * 0.75);\r\n            ctx.lineTo(-size * 0.75 * h, -size * 0.75);\r\n        }\r\n        ctx.lineTo(size * 0.4 * h, -size * 0.75);\r\n        ctx.closePath();\r\n        ctx.fillStyle = white ? '#ddd' : '#333';\r\n        ctx.fill();\r\n\r\n        ctx.resetTransform();\r\n    }\r\n}", "import Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Planet from './Planet';\r\n\r\nexport default class Explosion implements Component {\r\n    public entity: Entity = null!;\r\n    public timer = 0;\r\n\r\n    public constructor(\r\n        public readonly planet: Planet,\r\n        public x: number,\r\n        public y: number,\r\n        public size: number,\r\n        public explosionTime = 0.5\r\n    ) {}\r\n\r\n    public init(entity: Entity): void {\r\n        entity.zOrder = Order.Explosion;\r\n        this.entity = entity;\r\n        Game.instance!.explosions.push(this);\r\n    }\r\n\r\n    public update(dt: number) {\r\n        this.timer += dt * this.planet.getTimeMultiplier();\r\n\r\n        if (this.timer > this.explosionTime) {\r\n            this.entity.destroy();\r\n            let explosions = Game.instance!.explosions;\r\n            explosions.splice(explosions.indexOf(this), 1);\r\n        }\r\n    }\r\n\r\n    public alpha() {\r\n        return Math.max(0, (1 - this.timer / this.explosionTime) / Math.max(1, Math.log(1 + this.size * 10 / Planet.SIZE / Game.instance!.planet.scale)));\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Game from '../../Game';\r\nimport Explosion from '../Explosion';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport default class ExplosionUI implements UI {\r\n    private explosion: Explosion = null!;\r\n\r\n    public init(entity: Entity<{ base: Explosion }>): void {\r\n        this.explosion = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        let scale = Game.instance!.planet.scale;\r\n        ctx.beginPath();\r\n        ctx.arc(ui.x + this.explosion.x * ui.winScale, ui.y + this.explosion.y * ui.winScale, this.explosion.size / scale * ui.winScale, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#fff';\r\n        ctx.globalAlpha = this.explosion.alpha();\r\n        ctx.fill();\r\n        ctx.globalAlpha = 1;\r\n    }\r\n}", "import Collider from '../Collider';\r\nimport ExplosionUI from '../components/ui/Explosion';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Explosion from './Explosion';\r\n\r\nexport default class PlanetHit implements Component {\r\n    public entity: Entity = null!;\r\n    public collider = new Collider();\r\n\r\n    public constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public size: number\r\n    ) {}\r\n\r\n    public init(entity: Entity): void {\r\n        this.entity = entity;\r\n        entity.zOrder = Order.PlanetHit;\r\n        Game.instance!.hits.push(this);\r\n\r\n        const planet = Game.instance!.planet\r\n        entity.app.spawn({ base: new Explosion(planet, this.x, this.y, this.size), ui: new ExplosionUI() })\r\n        this.updateCollider();\r\n        planet.tryDestroy(this.collider);\r\n    }\r\n\r\n    public updateCollider() {\r\n        this.collider.update({ x: this.x, y: this.y, radius: this.size / Game.instance!.planet.scale });\r\n    }\r\n}", "import Application from '../../Application';\r\nimport Collider from '../Collider';\r\nimport PlanetHitUI from '../components/ui/PlanetHit';\r\nimport RocketUI, { RocketFlags } from '../components/ui/Rocket';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Explosion from './Explosion';\r\nimport Planet from './Planet';\r\nimport PlanetHit from './PlanetHit';\r\nimport ExplosionUI from './ui/Explosion';\r\n\r\nconst TAU = Math.PI * 2;\r\n\r\nfunction shortAngleDist(a0: number,a1: number) {\r\n    var da = (a1 - a0) % TAU;\r\n    return 2*da % TAU - da;\r\n}\r\n\r\nfunction angleLerp(a0: number,a1: number,t: number) {\r\n    return a0 + shortAngleDist(a0,a1)*t;\r\n}\r\n\r\nfunction distance(x: number, y: number) {\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\nexport default class Rocket implements Component {\r\n    public entity: Entity = null!;\r\n    public app: Application = null!;\r\n    public collider = new Collider();\r\n    public angle: number;\r\n    public penetration = 1;\r\n    public trailTimer = 0;\r\n    public trailSpawnAtTime = 0;\r\n    public flags = 0;\r\n\r\n    public constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public size: number,\r\n        public damage: number,\r\n        public speed: number,\r\n        public gravity: number\r\n    ) {\r\n        const game = Game.instance!;\r\n        this.angle = Math.atan2(this.y, this.x) - Math.PI + Math.random() * TAU / game.planet.scale / game.epoch.multipliers.reset;\r\n        game.rockets.push(this);\r\n    }\r\n\r\n    public init(entity: Entity): void {\r\n        this.entity = entity;\r\n        this.app = entity.app;\r\n        entity.zOrder = Order.Rocket;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const game = Game.instance!,\r\n            planet = game.planet,\r\n            time = planet.getTimeMultiplier()\r\n\r\n        this.angle = angleLerp(this.angle, Math.atan2(this.y, this.x) - Math.PI, Math.min(1, dt * this.speed * time));\r\n\r\n        let speed = dt * 500 * this.speed / planet.scale * time,\r\n            dist = distance(this.x, this.y);\r\n\r\n        if (dist < speed) {\r\n            // this scope fixes 1e+308 speed\r\n            this.x = 0;\r\n            this.y = 0;\r\n            speed = Planet.SIZE * planet.scale;\r\n        } else {\r\n            this.x += Math.cos(this.angle) * speed;\r\n            this.y += Math.sin(this.angle) * speed;\r\n        }\r\n\r\n        this.updateCollider();\r\n\r\n        if (planet.intersects(this.collider))\r\n            this.collideWithPlanet(game, planet, speed);\r\n\r\n        this.trailTimer += dt * time;\r\n\r\n        if (this.trailTimer > this.trailSpawnAtTime) {\r\n            let cos = Math.cos(this.angle),\r\n                sin = Math.sin(this.angle),\r\n                width = this.size * 2;\r\n            this.app.spawn({ base: new Explosion(planet, this.x - cos * width, this.y - sin * width, this.size * (6 + Math.random()) / 10 * planet.scale, 0.33), ui: new ExplosionUI() });\r\n            this.trailSpawnAtTime = Math.random() / 30;\r\n            this.trailTimer = 0;\r\n        }\r\n    }\r\n\r\n    private collideWithPlanet(game: Game, planet: Planet, speed: number) {\r\n        let limit = 1_000,\r\n            multipliers = game.epoch.multipliers,\r\n            cos = Math.cos(this.angle),\r\n            sin = Math.sin(this.angle);\r\n\r\n        // get normal position\r\n\r\n        do {\r\n            this.x -= cos * speed / 2 / planet.scale;\r\n            this.y -= sin * speed / 2 / planet.scale;\r\n            this.updateCollider();\r\n        } while (planet.intersects(this.collider) && limit-- > 0);\r\n\r\n        while (!planet.intersects(this.collider) && limit-- > 0) {\r\n            this.x += cos * this.damage / 10 / planet.scale;\r\n            this.y += sin * this.damage / 10 / planet.scale;\r\n            this.updateCollider();\r\n        }\r\n\r\n        // wtf happened\r\n        if (this.x > 1e9 || this.y > 1e9) {\r\n            this.x = 0;\r\n            this.y = 0;\r\n        }\r\n\r\n        // explosion\r\n\r\n        let dist = Math.sqrt(this.x * this.x + this.y * this.y) + 1, // + 1 is NaN Fix\r\n            gravityPower = 1 + (Math.pow(2, this.gravity) - 1) / dist\r\n\r\n        game.score += this.damage * gravityPower / 10 * multipliers.score;\r\n        this.app.spawn({\r\n            base: new PlanetHit(this.x, this.y, this.damage * gravityPower * multipliers.power),\r\n            ui: new PlanetHitUI()\r\n        });\r\n\r\n        if (game.epoch.penetrationChance > Math.random()) this.penetration += 1;\r\n\r\n        if (--this.penetration <= 0) {\r\n            this.entity.destroy();\r\n            game.rockets.splice(game.rockets.indexOf(this), 1);\r\n        }\r\n    }\r\n\r\n    private updateCollider() {\r\n        let scale = Game.instance!.planet.scale;\r\n        this.collider.update({ x: this.x, y: this.y, radius: this.size / scale });\r\n    }\r\n\r\n    /** Spawn rocket's clone on orbit */\r\n    public spawnCloneOnOrbit(useTarget: boolean) {\r\n        const rocket = Rocket.spawnOnOrbit(this.damage, this.speed, this.gravity, useTarget);\r\n\r\n        rocket.size = this.size;\r\n        rocket.penetration = this.penetration;\r\n        rocket.flags = this.flags;\r\n\r\n        return rocket;\r\n    }\r\n\r\n    /** Spawn many rocket's clones */\r\n    public spawnClones(amount: number, useTarget: boolean) {\r\n        for (let i = amount + 1; --i;) {\r\n            this.spawnCloneOnOrbit(useTarget);\r\n        }\r\n    }\r\n\r\n    /** Spawn rocket on orbit and return */\r\n    public static spawnOnOrbit(damage: number, speed: number, gravity: number, useTarget: boolean) {\r\n        const game = Game.instance!,\r\n            angle = game.target.hidden || !useTarget\r\n                ? Math.random() * TAU\r\n                : game.target.angle + Math.random() * TAU / 12 - TAU / 12 / 2;\r\n\r\n        const rocket = new Rocket(\r\n            Math.cos(angle) * 1200,\r\n            Math.sin(angle) * 1200,\r\n            8, damage, speed, gravity\r\n        );\r\n\r\n        game.app.spawn({ base: rocket, ui: new RocketUI() });\r\n\r\n        return rocket;\r\n    }\r\n}", "import Application from '../../Application';\r\nimport Achievement from '../Achievement';\r\nimport Collider from '../Collider';\r\nimport DecorationUI from '../components/ui/Decoration';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Decoration, { DecorationType } from './Decoration';\r\nimport Rocket from './Rocket';\r\n\r\nconst planetPalette = [\r\n    { bg: '996', layers: ['ff9', 'fd9', 'fe9', 'ff9', 'ef9', 'df9'] },\r\n    { bg: '779', layers: ['99f', '9af', '9cf', 'a9f', 'c9f'] },\r\n    { bg: 'a66', layers: ['fa9', 'f2a291', 'fb9', 'e89', 'f9a', 'fa9', 'fc9'] },\r\n    { bg: '5a7', layers: ['8f9', '80f690', '7e8', '6d7', '7e7'] }\r\n];\r\n\r\ninterface PlanetLayer {\r\n    radius: number,\r\n    color: string\r\n}\r\n\r\nexport default class Planet implements Component {\r\n    public static readonly SIZE = 250;\r\n    public static readonly SIZE_SQUARE = Planet.SIZE * Planet.SIZE;\r\n    public static readonly DEATH_TIME = 0.75;\r\n    public app: Application = null!;\r\n    public scale = 1;\r\n    public destroyed = false;\r\n    public deathTime = 0;\r\n    public layers: PlanetLayer[] = [];\r\n    public rocketTime = 1; // instant spawn\r\n    public rocketInterval = 1;\r\n    public rocketPower = 100;\r\n    public rocketSpeed = 1;\r\n    public rocketGravity = 0;\r\n    public shootRockets = false;\r\n\r\n    private collider = new Collider();\r\n    private centerCollider = new Collider();\r\n\r\n    public init(entity: Entity): void {\r\n        entity.zOrder = Order.Planet;\r\n        this.app = entity.app;\r\n\r\n        this.updateColliders();\r\n        this.updatePalette();\r\n        this.spawnDecorations();\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const game = Game.instance!;\r\n        let time = this.getTimeMultiplier();\r\n\r\n        this.rotate(dt / 10 * time);\r\n\r\n        if (this.shootRockets) {\r\n            this.rocketTime += dt * time;\r\n\r\n            let rocketInterval = this.getRocketInterval();\r\n\r\n            if (this.rocketTime > rocketInterval) {\r\n                Rocket.spawnOnOrbit(this.rocketPower, this.rocketSpeed * game.epoch.multipliers.speed, this.rocketGravity, true);\r\n                this.rocketTime = 0;\r\n            }\r\n        }\r\n\r\n        if (!this.destroyed) return;\r\n\r\n        let timeSpeed = game.getTimeSpeed();\r\n\r\n        this.deathTime += dt * timeSpeed;\r\n\r\n        this.app.shakePower = 10 * time / timeSpeed;\r\n\r\n        if (this.deathTime > Planet.DEATH_TIME * game.epoch.multipliers.reset)\r\n            this.respawn();\r\n    }\r\n\r\n    public respawn(fullRespawn = true, giveScore = true) {\r\n        let game = Game.instance!;\r\n        this.scale *= Math.pow(1.125, 2 / Math.sqrt(this.scale));\r\n        if (giveScore) game.score += Math.pow(50 * game.level, 1.1) * game.epoch.multipliers.score;\r\n        game.level += Math.round(game.epoch.multipliers.level);\r\n\r\n        if (!fullRespawn) return;\r\n\r\n        game.clearAll();\r\n        this.updateColliders();\r\n        this.destroyed = false;\r\n        this.deathTime = 0;\r\n        this.app.shakePower = 0;\r\n        this.updatePalette();\r\n        this.spawnDecorations();\r\n        this.rocketTime = this.rocketInterval;\r\n\r\n        // lets check it only when planet is destroyed\r\n        if (giveScore && game.score > 1_000_000) Achievement.unlock('One Million');\r\n\r\n        switch (game.level) {\r\n            // achievements\r\n            case 10: Achievement.unlock('Level 10'); break;\r\n            case 1000: Achievement.unlock('Level 1000'); break;\r\n            case 10000: Achievement.unlock('The End'); break;\r\n            // achievements with rockets\r\n            case 3: Achievement.unlock('Rocket 2'); break;\r\n            case 7: Achievement.unlock('Rocket 3'); break;\r\n            case 15: Achievement.unlock('Rocket 4'); break;\r\n            case 25: Achievement.unlock('Rocket 5'); break;\r\n            case 40: Achievement.unlock('Rocket 6'); break;\r\n            case 60: Achievement.unlock('Rocket 7'); break;\r\n            case 80: Achievement.unlock('Rocket 8'); break;\r\n        }\r\n    }\r\n\r\n    public updatePalette() {\r\n        const palette = planetPalette[Math.floor(Math.random() * planetPalette.length)];\r\n        this.makeLayers(palette.layers);\r\n        this.app.backgroundColor = '#' + palette.bg as `#${string}`;\r\n    }\r\n\r\n    public spawnDecorations() {\r\n        if (this.scale > 50) return;\r\n\r\n        const amount = Math.min(80, Math.round(30 * this.scale));\r\n\r\n        for (let i = 0; i < amount; ++i) {\r\n            let angle = Math.PI * 2 * i / amount + (Math.random() * 30 - 15) * Math.PI / 180;\r\n\r\n            this.app.spawn({ base: new Decoration(\r\n                Math.cos(angle) * Planet.SIZE,\r\n                Math.sin(angle) * Planet.SIZE,\r\n                10 * Math.sqrt(this.scale) + Math.random() * 40,\r\n                angle,\r\n                Math.random() > 0.36 ? DecorationType.Hill : DecorationType.Tree\r\n            ), ui: new DecorationUI() });\r\n        }\r\n    }\r\n\r\n    public makeLayers(layersPalette: string[]) {\r\n        this.layers.splice(0, this.layers.length);\r\n\r\n        let height = Planet.SIZE * this.scale,\r\n            middleRadius = this.centerAreaRadius(),\r\n            i = 0;\r\n\r\n        while (height > middleRadius) {\r\n            this.layers.push({ radius: height / this.scale, color: '#' + layersPalette[i % layersPalette.length] });\r\n            if (i == 0) height -= 15 * this.scale;\r\n            else height -= 5 * this.scale + 50 * i + 40 * i * Math.random() + 5 * this.scale * Math.random();\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    public updateColliders() {\r\n        this.collider.update({ x: 0, y: 0, radius: Planet.SIZE });\r\n        this.centerCollider.update({ x: 0, y: 0, radius: this.centerAreaRadius() });\r\n    }\r\n\r\n    public intersects(collider: Collider): boolean {\r\n        if (!this.collider.intersects(collider, true)) return false;\r\n\r\n        for (let hit of Game.instance!.hits) {\r\n            if (hit.collider.intersects(collider, true))\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public tryDestroy(collider: Collider) {\r\n        if (this.centerCollider.intersects(collider, false)) {\r\n            this.destroyed = true;\r\n        }\r\n    }\r\n\r\n    public centerAreaRadius(): number {\r\n        return Planet.SIZE * Math.max(0.05, 0.25 - this.scale / 10 * 0.20);\r\n    }\r\n\r\n    public getTimeMultiplier(): number {\r\n        const game = Game.instance!,\r\n            time = game.getTimeSpeed();\r\n\r\n        if (this.deathTime == 0) return time;\r\n\r\n        const reset = game.epoch.multipliers.reset;\r\n\r\n        return Math.max(0, Planet.DEATH_TIME - this.deathTime / reset) / 1.5 / Planet.DEATH_TIME * time;\r\n    }\r\n\r\n    public rotate(radians: number) {\r\n        let sin = Math.sin(radians);\r\n\r\n        // (normal speed)\r\n        // cos = 0.9999...\r\n        // sin = 0.0007...\r\n        // distanceIn = 250.0\r\n        // distanceOut = 249.9\r\n        //\r\n        // so, cos = 1\r\n\r\n        for (let hit of Game.instance!.hits) {\r\n            hit.x = hit.x - hit.y * sin;\r\n            hit.y = hit.x * sin + hit.y;\r\n            hit.updateCollider();\r\n        }\r\n\r\n        for (let explosion of Game.instance!.explosions) {\r\n            explosion.x = explosion.x - explosion.y * sin;\r\n            explosion.y = explosion.x * sin + explosion.y;\r\n        }\r\n\r\n        for (let deco of Game.instance!.decorations) {\r\n            deco.x = deco.x - deco.y * sin;\r\n            deco.y = deco.x * sin + deco.y;\r\n            deco.angle += radians;\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.rocketPower = 100;\r\n        this.rocketSpeed = 1;\r\n        this.rocketGravity = 0;\r\n        this.scale = 1;\r\n        this.destroyed = false;\r\n        this.deathTime = 0;\r\n        this.rocketTime = 1;\r\n        this.rocketInterval = 1;\r\n        this.app.shakePower = 0;\r\n        this.updateColliders();\r\n        this.updatePalette();\r\n        this.spawnDecorations();\r\n    }\r\n\r\n    public getRocketInterval(): number {\r\n        return this.rocketInterval * Game.instance!.epoch.multipliers.interval;\r\n    }\r\n\r\n    public postLoad(level: number) {\r\n        for (let i = 0; i < level - 1; ++i){\r\n            this.respawn(false, false);\r\n        }\r\n        this.respawn(true, false);\r\n    }\r\n}", "import Planet from '../../components/Planet';\r\nimport Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class PlanetResetUpgrade extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Faster Reset', 'x0.8', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.reset *= 0.8;\r\n        game.epoch.multipliers.speed *= 1.1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Decrease planet\\'s reset by 20% each upgrade. Current reset time is ' + (Planet.DEATH_TIME * Game.instance!.epoch.multipliers.reset * 1000).toFixed(0) + 'ms. Also buffs rockets speed by x1.1';\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class PowerMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Power', '+1', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.power += 1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Increase the power multiplier by 1. Current power multiplier is ' + Game.instance!.epoch.multipliers.power;\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class ScoreMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Score', '+1', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.score += 1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Increase score (income) multiplier by 1. Current score multiplier is ' + Game.instance!.epoch.multipliers.score;\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class TimeMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Time', '+0.1', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.time += 0.1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Speed up the time. Current time multiplier is ' + Game.instance!.epoch.multipliers.time.toFixed(1)\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class EpochBtn extends Button {\r\n    public constructor() {\r\n        super('UPGRADES', {\r\n            offsetX: -170,\r\n            offsetY: 40,\r\n            screenX: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        Game.instance!.overlay.scene = Scene.Epoch;\r\n    }\r\n}", "import Button from '../Button';\r\nimport Game from '../Game';\r\n\r\nexport default class NewEpochBtn extends Button {\r\n    public constructor() {\r\n        super('NEW EPOCH', {\r\n            offsetY: 108,\r\n            screenX: 0.5,\r\n            screenY: 0,\r\n            width: 300,\r\n            height: 24,\r\n            fontSize: 20,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 12\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        Game.instance!.epoch.endEpoch();\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\nexport default class PlayBtn extends Button {\r\n    public constructor() {\r\n        super('PLAY', {\r\n            offsetY: 100,\r\n            screenX: 0.5,\r\n            screenY: 0.5,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'hsl(199, 64%, 71%)',\r\n            overStrokeColor: 'hsl(200, 100%, 86%)',\r\n            pressStrokeColor: 'hsl(199, 53%, 76%)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n        game.planet.shootRockets = true;\r\n        game.overlay.scene = Scene.Game;\r\n        game.target.canClick = true;\r\n    }\r\n}", "import Button from '../../Button';\r\nimport Rocket from '../../components/Rocket';\r\nimport RocketUI from '../../components/ui/Rocket';\r\nimport { UIContext } from '../../components/ui/UI';\r\nimport Game from '../../Game';\r\n\r\ntype RocketDummy = {\r\n    offset: number,\r\n    dummySize: number\r\n}\r\n\r\ntype RocketConfig = {\r\n    size: number,\r\n    speed?: number,\r\n    damage: number,\r\n    gravity?: number,\r\n    onSpawn?: (r: Rocket) => void,\r\n    flags: number\r\n}\r\n\r\n// not so button\r\nexport default class RocketBtn extends Button {\r\n    private rotation = 0;\r\n    private reload = 0;\r\n\r\n    public constructor(\r\n        private readonly config: RocketDummy & RocketConfig,\r\n        public reloadTime = 1,\r\n        public unlocked = false\r\n    ) {\r\n        super('', {\r\n            screenX: 0.5,\r\n            screenY: 1,\r\n            width: 80,\r\n            height: 80\r\n        });\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        //super.render is implemented here\r\n        if (this.hidden) return;\r\n\r\n        let measure = this.measure(ui),\r\n            cos = Math.cos(this.rotation),\r\n            sin = Math.sin(this.rotation);\r\n\r\n        super.update(ui.width, ui.height, ui.winScale, measure.width / 2);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(measure.x + measure.w / 2, measure.y + measure.h / 2, measure.w / 2, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(255,255,255,0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(measure.x + measure.w / 2, measure.y + measure.h / 2);\r\n        ctx.arc(measure.x + measure.w / 2, measure.y + measure.h / 2, measure.w / 2, 0, 2 * Math.PI * this.reload / this.reloadTime);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fill();\r\n\r\n        if (!this.unlocked) {\r\n            ctx.font = 52 * ui.winScale + 'px Ubuntu';\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillStyle = '#333';\r\n            ctx.fillText('?', measure.x + measure.w / 2, measure.y + measure.h / 2);\r\n            return;\r\n        }\r\n\r\n        const scale = 1.5;\r\n\r\n        RocketUI.renderDummy(\r\n            ctx,\r\n            this.config.dummySize * ui.winScale * scale,\r\n            measure.x + measure.w / 2 + this.config.offset * ui.winScale * cos * scale,\r\n            measure.y + measure.h / 2 + this.config.offset * ui.winScale * sin * scale,\r\n            this.rotation,\r\n            this.config.flags\r\n        );\r\n\r\n        this.rotation += ui.dt;\r\n        this.reload = Math.min(this.reloadTime, this.reload + ui.dt);\r\n    }\r\n\r\n    public onClick(): void {\r\n        if (this.reload != this.reloadTime) return;\r\n\r\n        const game = Game.instance!,\r\n            planet = game.planet,\r\n            rocket = Rocket.spawnOnOrbit(\r\n                planet.rocketPower * this.config.damage,\r\n                planet.rocketSpeed * (this.config.speed || 1) * game.epoch.multipliers.speed,\r\n                planet.rocketGravity * (this.config.gravity || 1),\r\n                true\r\n            );\r\n\r\n        rocket.size = this.config.size;\r\n        rocket.flags = this.config.flags;\r\n\r\n        this.config.onSpawn?.(rocket);\r\n\r\n        this.reload = 0;\r\n    }\r\n}", "import { RocketFlags } from '../../components/ui/Rocket';\r\nimport RocketBtn from './RocketBtn';\r\n\r\nexport default [\r\n    // First layer\r\n    [\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 10,\r\n            size: 12.5, damage: 1.25,\r\n            flags: RocketFlags.None\r\n        }, 1, true),\r\n\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 9,\r\n            size: 12.5, speed: 2, damage: 0.6, gravity: 0.5,\r\n            onSpawn: r => r.penetration = 4,\r\n            flags: RocketFlags.Long\r\n        }, 4),\r\n\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 11.5,\r\n            size: 20, speed: 0.6, damage: 3,\r\n            flags: RocketFlags.Hammer\r\n        }, 8),\r\n\r\n        new RocketBtn({\r\n            offset: -3, dummySize: 8,\r\n            size: 8, speed: 1.5, damage: 0.5,\r\n            flags: RocketFlags.Sharp\r\n        }, 0.125),\r\n\r\n        new RocketBtn({\r\n            offset: 6, dummySize: 13,\r\n            size: 60, speed: 0.2, damage: 90, gravity: 0.1,\r\n            flags: RocketFlags.White\r\n        }, 90)\r\n    ],\r\n    // Second layer (elites)\r\n    [\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 8,\r\n            size: 15, speed: 3, damage: 0.4, gravity: 0,\r\n            onSpawn: r => r.penetration = 8,\r\n            flags: RocketFlags.Longer\r\n        }, 12),\r\n\r\n        new RocketBtn({\r\n            offset: -4, dummySize: 7,\r\n            size: 7, speed: 2, damage: 0.5,\r\n            onSpawn: r => r.spawnClones(24, false),\r\n            flags: RocketFlags.Triangle\r\n        }, 5),\r\n\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 7,\r\n            size: 10, speed: 4, damage: 0.3, gravity: 0,\r\n            onSpawn: r => r.penetration = 16,\r\n            flags: RocketFlags.Long | RocketFlags.Longer\r\n        }, 15)\r\n    ],\r\n    /* Third layer (removed elites)\r\n    [\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 7,\r\n            size: 10, speed: 4, damage: 0.3, gravity: 0,\r\n            onSpawn: r => { r.penetration = 16; r.spawnClones(2, true); },\r\n            flags: RocketFlags.Long | RocketFlags.Longer | RocketFlags.White\r\n        }, 1)\r\n    ]\r\n    */\r\n];", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class NewEpochBtn extends Button {\r\n    public constructor() {\r\n        super('START', {\r\n            offsetY: -60,\r\n            screenX: 0.5,\r\n            screenY: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 12\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n        game.planet.shootRockets = true;\r\n        game.overlay.scene = Scene.Game;\r\n        game.target.canClick = true;\r\n    }\r\n}", "import Button from '../../Button';\r\nimport { UIContext } from '../../components/ui/UI';\r\nimport Game from '../../Game';\r\nimport { ISave, Save } from '../../saves';\r\n\r\nexport default abstract class Upgrade extends Button implements ISave {\r\n    private readonly initialCost: number;\r\n    protected cachedDescription: string[] = [];\r\n    public level = 0;\r\n\r\n    public constructor(public readonly name: string, public cost: number, public readonly maxLevel: number) {\r\n        super('BUY', {\r\n            screenY: 1,\r\n            width: 120,\r\n            height: 42,\r\n            fontSize: 28,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'hsl(199, 64%, 71%)',\r\n            overStrokeColor: 'hsl(200, 100%, 86%)',\r\n            pressStrokeColor: 'hsl(199, 53%, 76%)',\r\n            rounding: 20\r\n        });\r\n        this.initialCost = cost;\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        if (this.cachedDescription.length == 0)\r\n            this.cachedDescription = this.getDescription();\r\n\r\n        let measure = this.measure(ui),\r\n            width = 180 * ui.winScale,\r\n            description = this.getDescription(),\r\n            descLength = 20 * description.length * ui.winScale,\r\n            textOffset = 60 * ui.winScale,\r\n            height = 90 * ui.winScale;\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(\r\n            measure.x - width / 2,\r\n            measure.y - height - descLength,\r\n            measure.w + width,\r\n            measure.h + height + descLength * 2,\r\n            [16, 16, 0, 0]\r\n        );\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.cost < Game.instance!.score ? 'rgba(0,0,0,0.4)' : 'rgba(0,0,0,0.6)';\r\n        ctx.fill();\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n\r\n        ctx.fillStyle = '#eee';\r\n        ctx.fillText(this.name + ' [' + this.level + ']', measure.x + textOffset, measure.y - descLength - 60 * ui.winScale);\r\n\r\n        ctx.font = 18 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.fillText(this.level == this.maxLevel ? 'MAX' : 'Cost: ' + Game.format(this.cost), measure.x + textOffset, measure.y - descLength - 28 * ui.winScale);\r\n\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.font = 12 * ui.winScale + 'px Ubuntu';\r\n        for (let i = description.length - 1; i >= 0; --i) {\r\n            ctx.fillText(description[i], measure.x + textOffset, measure.y - 25 * ui.winScale - 20 * i * ui.winScale);\r\n        }\r\n\r\n        super.render(ctx, ui);\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n\r\n        if (game.score < this.cost || this.level >= this.maxLevel) return;\r\n        game.score -= this.cost;\r\n        this.onPurchase(game);\r\n        this.level += 1;\r\n        this.cachedDescription = this.getDescription();\r\n        if (this.level == this.maxLevel) this.text = 'MAX';\r\n    }\r\n\r\n    public reset() {\r\n        this.level = 1;\r\n        this.cost = this.initialCost;\r\n        this.cachedDescription = this.getDescription();\r\n        this.text = 'BUY';\r\n    }\r\n\r\n    public abstract onPurchase(game: Game): void;\r\n    public abstract getDescription(): string[];\r\n\r\n    public purchaseMany(game: Game, count: number) {\r\n        for (let i = 0; i < count; ++i)\r\n            this.onPurchase(game);\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(this.level);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        this.level = save.readU8();\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class GravityUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Gravity', 100, 50);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.planet.rocketGravity += 0.2;\r\n        this.cost += this.cost / 3 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            '+0.2 rocket gravity per upgrade',\r\n            'to the planet. Grows geometrically!',\r\n            'Rockets will damage more if they are closer',\r\n            'Current rocket gravity: ' + Game.instance!.planet.rocketGravity.toFixed(1)\r\n        ];\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class LessIntervalUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Less Interval', 100, 60);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.planet.rocketInterval *= 0.95;\r\n        this.cost += this.cost / 3.5 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            'Decreases the rocket interval by x0.95',\r\n            'Current rocket interval: ' + (Game.instance!.planet.rocketInterval * 1000).toFixed(1) + 'ms',\r\n        ];\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class PowerUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Power', 100, 100);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.planet.rocketPower *= 1.1;\r\n        this.cost += this.cost / 6 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            'x1.1 rocket power',\r\n            'Current rocket power: ' + Game.format(Game.instance!.planet.rocketPower)\r\n        ];\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class SpeedUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Speed', 100, 100);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        if (this.level % 10 == 9) this.cost += this.cost * game.epoch.multipliers.cost;\r\n        game.planet.rocketSpeed = Math.pow(game.planet.rocketSpeed * 1.45, 1.01);\r\n        this.cost += this.cost / 1.1 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            'x1.45 rocket speed (^1.01)',\r\n            'Current rocket speed: ' + Game.format(Game.instance!.planet.rocketSpeed, 1)\r\n        ];\r\n    }\r\n}", "import Achievement from '../Achievement';\r\nimport ChallengeBtn from '../buttons/ChallengeBtn';\r\nimport ChallengesBtn from '../buttons/ChallengesBtn';\r\nimport EndChallengeBtn from '../buttons/EndChallengeBtn';\r\nimport CostMultiplier from '../buttons/epoch/CostMultiplier';\r\nimport EpochUpgrade from '../buttons/epoch/EpochUpgrade';\r\nimport PenetrationChance from '../buttons/epoch/PenetrationChance';\r\nimport PlanetResetUpgrade from '../buttons/epoch/PlanetResetUpgrade';\r\nimport PowerMultiplier from '../buttons/epoch/PowerMultiplier';\r\nimport ScoreMultiplier from '../buttons/epoch/ScoreMultiplier';\r\nimport TimeMultiplier from '../buttons/epoch/TimeMultiplier';\r\nimport EpochBtn from '../buttons/EpochBtn';\r\nimport NewEpochBtn from '../buttons/NewEpochBtn';\r\nimport PlayBtn from '../buttons/PlayBtn';\r\nimport RocketBtn from '../buttons/rockets/RocketBtn';\r\nimport rocketLayers from '../buttons/rockets/RocketLayers';\r\nimport StartEpochBtn from '../buttons/StartEpochBtn';\r\nimport GravityUpgrade from '../buttons/upgrade/GravityUpgrade';\r\nimport LessIntervalUpgrade from '../buttons/upgrade/LessIntervalUpgrade';\r\nimport PowerUpgrade from '../buttons/upgrade/PowerUpgrade';\r\nimport SpeedUpgrade from '../buttons/upgrade/SpeedUpgrade';\r\nimport Upgrade from '../buttons/upgrade/Upgrade';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport { ISave, Save } from '../saves';\r\nimport Component from './Component';\r\n\r\nexport const enum Scene {\r\n    Menu,\r\n    Game,\r\n    Epoch,\r\n    Challenges\r\n}\r\n\r\nexport default class Overlay implements Component, ISave {\r\n    public static readonly ACHIEVEMENT_TIME = 5;\r\n    private readonly achievementsStack: Achievement[] = [];\r\n    private achievementTimer = 0;\r\n    private nextAchievementAt = 0;\r\n    public entity: Entity = null!;\r\n    public logoImage: HTMLImageElement;\r\n    public scene = Scene.Menu;\r\n\r\n    public readonly upgrades: Upgrade[] = [\r\n        new PowerUpgrade(),\r\n        new LessIntervalUpgrade(),\r\n        new SpeedUpgrade(),\r\n        new GravityUpgrade()\r\n    ];\r\n\r\n    public readonly epochUpgrades: EpochUpgrade[] = [\r\n        new PowerMultiplier(),\r\n        new ScoreMultiplier(),\r\n        new CostMultiplier(),\r\n        new TimeMultiplier(),\r\n        new PenetrationChance(),\r\n        new PlanetResetUpgrade()\r\n    ];\r\n\r\n    public challengeButtons: ChallengeBtn[] = null!;\r\n\r\n    public readonly rocketButtons: RocketBtn[][] = rocketLayers;\r\n    public rocketButtonsEnabled = true;\r\n\r\n    public readonly play = new PlayBtn();\r\n    public readonly newEpoch = new NewEpochBtn();\r\n    public readonly startEpoch = new StartEpochBtn();\r\n    public readonly challenges = new ChallengesBtn();\r\n    public readonly epoch = new EpochBtn();\r\n    public readonly endChallenge = new EndChallengeBtn();\r\n\r\n    public constructor() {\r\n        this.logoImage = new Image();\r\n        this.logoImage.src = 'logo.png';\r\n    }\r\n\r\n    public init(entity: Entity) {\r\n        entity.zOrder = Order.Overlay;\r\n        this.challengeButtons = Game.instance!.epoch.challenges.map(challenge => new ChallengeBtn(challenge));\r\n        this.entity = entity;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        if (!this.nextAchievementAt) return;\r\n\r\n        this.achievementTimer += dt;\r\n\r\n        if (this.achievementTimer > this.nextAchievementAt) {\r\n            this.achievementsStack.shift();\r\n            this.achievementTimer = 0;\r\n            if (!this.achievementsStack[0])\r\n                this.nextAchievementAt = 0;\r\n        }\r\n    }\r\n\r\n    public pushAchievement(achievement: Achievement) {\r\n        this.achievementsStack.push(achievement);\r\n        this.nextAchievementAt = Overlay.ACHIEVEMENT_TIME;\r\n        this.achievementTimer = 0;\r\n    }\r\n\r\n    public getAchievement(): Achievement | undefined {\r\n        return this.achievementsStack[0];\r\n    }\r\n\r\n    /** https://www.desmos.com/Calculator/9th1u5gtpl */\r\n    public achievementAlpha() {\r\n        if (!this.nextAchievementAt) return 0;\r\n\r\n        return Math.min(1, this.achievementTimer / 0.1 / this.nextAchievementAt)\r\n            - Math.max(0, (this.achievementTimer - this.nextAchievementAt * 0.9) / 0.1 / this.nextAchievementAt);\r\n    }\r\n\r\n    public resetUpgrades() {\r\n        for (let upgrade of this.upgrades) {\r\n            upgrade.reset();\r\n        }\r\n    }\r\n\r\n    public unlockRocket(layer: number, index: number) {\r\n        let rocketLayer = this.rocketButtons[layer];\r\n        if (!rocketLayer) return;\r\n\r\n        let rocket = rocketLayer[index];\r\n        if (!rocket) return;\r\n\r\n        rocket.unlocked = true;\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeArray(this.upgrades);\r\n        save.writeArray(this.epochUpgrades);\r\n        // dont save rocketLayers\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        save.loadArray(this.upgrades);\r\n        save.loadArray(this.epochUpgrades);\r\n    }\r\n\r\n    public postLoad() {\r\n        for (let upgrade of this.upgrades) {\r\n            upgrade.purchaseMany(Game.instance!, upgrade.level);\r\n        }\r\n        for (let upgrade of this.epochUpgrades) {\r\n            upgrade.purchaseMany(Game.instance!, upgrade.level);\r\n        }\r\n    }\r\n}", "import Application from '../../Application';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\nimport { ISave, Save } from '../saves';\r\n\r\nexport default abstract class Challenge implements ISave {\r\n    private startTime: number | null = null;\r\n    public completedTime: number | null = null;\r\n    public completed = false;\r\n\r\n    public constructor(\r\n        public readonly name: string,\r\n        public readonly description: string,\r\n        public readonly reward: string\r\n    ) {}\r\n\r\n    public abstract onStart(game: Game): void;\r\n    public abstract onReward(game: Game): void;\r\n    public abstract onEnd(game: Game): void;\r\n\r\n    public start() {\r\n        const game = Game.instance!;\r\n\r\n        game.epoch.currentChallenge = this;\r\n\r\n        this.startTime = Application.now();\r\n\r\n        game.planet.shootRockets = true; // active challenge\r\n        game.target.canClick = true;\r\n        this.onStart(game);\r\n        game.overlay.scene = Scene.Game;\r\n    }\r\n\r\n    public end(completed: boolean) {\r\n        if (!this.startTime) return;\r\n\r\n        const game = Game.instance!;\r\n\r\n        this.onEnd(game);\r\n\r\n        game.epoch.currentChallenge = null;\r\n\r\n        if (!completed) {\r\n            this.startTime = null;\r\n            return;\r\n        }\r\n\r\n        this.completedTime = Application.now() - this.startTime;\r\n        if (!this.completed) this.onReward(game);\r\n        this.completed = true;\r\n    }\r\n\r\n    public isInChallenge(): boolean {\r\n        return this.startTime != null;\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8((this.name.length + this.description.length + this.reward.length) % 0xff);\r\n        save.writeBoolean(this.completed);\r\n        if (this.completed) save.writeF64(this.completedTime!);\r\n        save.writeBoolean(this.isInChallenge());\r\n        if (this.isInChallenge()) save.writeF64(this.startTime!);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        const sum = (this.name.length + this.description.length + this.reward.length) % 0xff;\r\n        if (sum != save.readU8()) {\r\n            let a = save.readBoolean()\r\n            if (a) save.readF64()\r\n            let b = save.readBoolean()\r\n            if (b) save.readF64()\r\n            return;\r\n        }\r\n        this.completed = save.readBoolean();\r\n        if (this.completed) this.completedTime = save.readF64();\r\n        if (save.readBoolean()) {\r\n            // the challenge is active\r\n            this.startTime = save.readF64();\r\n            this.onStart(Game.instance!);\r\n        }\r\n    }\r\n}", "import Game from '../Game';\r\nimport Challenge from './Challenge';\r\n\r\nexport default class ActiveChallenge extends Challenge {\r\n    public constructor() {\r\n        super('Active', 'Auto rockets are disabled', '2x rocket reload');\r\n    }\r\n\r\n    public onStart(game: Game): void {\r\n        game.planet.shootRockets = false;\r\n    }\r\n\r\n    public onReward(game: Game): void {\r\n        game.epoch.multipliers.interval /= 2;\r\n    }\r\n\r\n    public onEnd(game: Game): void {\r\n        game.planet.shootRockets = true;\r\n    }\r\n}", "import Game from '../Game';\r\nimport Challenge from './Challenge';\r\n\r\nexport default class EpochChallenge extends Challenge {\r\n    public constructor() {\r\n        super('Epoch', 'Epoch gain x0.1 (starts from level 500) and rockets are 10x slower', '+2 level per level');\r\n    }\r\n\r\n    public onStart(game: Game): void {\r\n        game.epoch.multipliers.epoch *= 0.1;\r\n        game.epoch.multipliers.speed /= 10;\r\n    }\r\n\r\n    public onReward(game: Game): void {\r\n        game.epoch.multipliers.level += 1\r\n    }\r\n\r\n    public onEnd(game: Game): void {\r\n        game.epoch.multipliers.epoch /= 0.1;\r\n        game.epoch.multipliers.speed *= 10;\r\n    }\r\n}", "import Game from '../Game';\r\nimport Challenge from './Challenge';\r\n\r\nexport default class OfflineChallenge extends Challenge {\r\n    public constructor() {\r\n        super('Offline', 'Target and buttons are disabled', '2x button reload');\r\n    }\r\n\r\n    public onStart(game: Game): void {\r\n        game.target.canClick = false;\r\n        game.overlay.rocketButtonsEnabled = false;\r\n    }\r\n\r\n    public onReward(game: Game): void {\r\n        // typescript will compile this into for i loops\r\n        for (let layer of game.overlay.rocketButtons) {\r\n            for (let rocket of layer) {\r\n                rocket.reloadTime /= 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    public onEnd(game: Game): void {\r\n        game.target.canClick = true;\r\n        game.overlay.rocketButtonsEnabled = true;\r\n    }\r\n}", "import Achievement from './Achievement';\r\nimport ActiveChallenge from './challenges/ActiveChallenge';\r\nimport Challenge from './challenges/Challenge';\r\nimport EpochChallenge from './challenges/EpochChallenge';\r\nimport OfflineChallenge from './challenges/OfflineChallenge';\r\nimport { Scene } from './components/Overlay';\r\nimport Game from './Game';\r\nimport { ISave, Save } from './saves';\r\n\r\nexport default class Epoch implements ISave {\r\n    public static readonly EPOCH_LEVEL = 100;\r\n\r\n    public readonly challenges: Challenge[] = [\r\n        new OfflineChallenge(),\r\n        new ActiveChallenge(),\r\n        new EpochChallenge()\r\n    ];\r\n    public currentChallenge: Challenge | null = null;\r\n\r\n    public multipliers = {\r\n        power: 1, cost: 1, score: 1,\r\n        time: 1, reset: 1, speed: 1,\r\n        epoch: 1, level: 1, interval: 1\r\n    };\r\n    public penetrationChance = 0;\r\n\r\n    public points = 0;\r\n    public count = 0;\r\n\r\n    public endEpoch() {\r\n        const game = Game.instance!;\r\n\r\n        if (this.count == 0) Achievement.unlock('First Epoch');\r\n\r\n        this.count += 1;\r\n        this.points += this.calculatePoints(game.level);\r\n        game.reset();\r\n        game.overlay.scene = Scene.Epoch;\r\n        game.planet.shootRockets = false;\r\n        game.target.canClick = false;\r\n\r\n        if (this.points > 1_000_000) Achievement.unlock('Evolution');\r\n\r\n        this.currentChallenge?.end(true);\r\n    }\r\n\r\n    public calculatePoints(level: number): number {\r\n        return Math.round(Math.pow(level / Epoch.EPOCH_LEVEL, 2 + level / 1000) * this.multipliers.epoch);\r\n    }\r\n\r\n    public isInChallenge(): boolean {\r\n        return this.currentChallenge != null;\r\n    }\r\n\r\n    public calculateProgress(level: number): number {\r\n        return Math.min(1, level / Epoch.EPOCH_LEVEL * this.multipliers.epoch);\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU32(this.count);\r\n        save.writeF64(this.points);\r\n        save.writeArray(this.challenges);\r\n        // 0 if no current challenge\r\n        save.writeU8(this.currentChallenge ? this.challenges.indexOf(this.currentChallenge) + 1 : 0);\r\n        // dont save multipliers\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        this.count = save.readU32();\r\n        this.points = save.readF64();\r\n        save.loadArray(this.challenges);\r\n        let challengeIndex = save.readU8() - 1;\r\n        if (challengeIndex > -1)\r\n            this.currentChallenge = this.challenges[challengeIndex];\r\n    }\r\n}", "import { ISave } from './ISave';\r\n\r\nexport class Save {\r\n    public static readonly VERSION = 1;\r\n    public static readonly INITIAL_SIZE = 0xFFFF;\r\n    public static readonly LITTLE_ENDIAN = true;\r\n    private dataview: DataView;\r\n    private offset = 0;\r\n\r\n    public constructor(\r\n        private u8 = new Uint8Array(Save.INITIAL_SIZE),\r\n        private length = Save.INITIAL_SIZE\r\n    ) {\r\n        this.dataview = new DataView(this.u8.buffer);\r\n    }\r\n\r\n    public static fromU8(u8: Uint8Array) {\r\n        return new Save(u8, u8.length);\r\n    }\r\n\r\n    public static fromLocalStorage(): Save | undefined {\r\n        const storage = localStorage.getItem('save');\r\n\r\n        if (!storage) return undefined;\r\n\r\n        return Save.fromU8(\r\n            new Uint8Array(atob(storage)\r\n                .split('')\r\n                .map(char => char.charCodeAt(0))\r\n            )\r\n        );\r\n    }\r\n\r\n    public toLocalStorage() {\r\n        localStorage.setItem('save', btoa(\r\n            Array.from(this.u8.slice(0, this.offset))\r\n                .map(byte => String.fromCharCode(byte))\r\n                .join('')\r\n        ));\r\n    }\r\n\r\n    private grow() {\r\n        let newU8 = new Uint8Array(this.length += Save.INITIAL_SIZE);\r\n        newU8.set(this.u8, 0);\r\n        this.u8 = newU8;\r\n        this.dataview = new DataView(this.u8.buffer);\r\n    }\r\n\r\n    private shouldGrow(length: number) {\r\n        if (this.offset + length > this.length) {\r\n            this.grow();\r\n        }\r\n    }\r\n\r\n    public writeU8(value: number) {\r\n        this.shouldGrow(1);\r\n        this.u8[this.offset] = value;\r\n        this.offset += 1;\r\n    }\r\n\r\n    public writeU16(value: number) {\r\n        this.shouldGrow(2);\r\n        this.dataview.setUint16(this.offset, value, Save.LITTLE_ENDIAN);\r\n        this.offset += 2;\r\n    }\r\n\r\n    public writeU32(value: number) {\r\n        this.shouldGrow(4);\r\n        this.dataview.setUint32(this.offset, value, Save.LITTLE_ENDIAN);\r\n        this.offset += 4;\r\n    }\r\n\r\n    public writeF64(value: number) {\r\n        this.shouldGrow(8);\r\n        this.dataview.setFloat64(this.offset, value, Save.LITTLE_ENDIAN);\r\n        this.offset += 8;\r\n    }\r\n\r\n    public writeBoolean(value: boolean) {\r\n        this.writeU8(value ? 1 : 0);\r\n    }\r\n\r\n    public writeString(value: string) {\r\n        this.shouldGrow(value.length + 1);\r\n        for (let i = 0; i < value.length; i++) {\r\n            this.u8[this.offset] = value.charCodeAt(i);\r\n            this.offset += 1;\r\n        }\r\n        this.u8[this.offset] = 0;\r\n        this.offset += 1;\r\n    }\r\n\r\n    public write(data: ISave) {\r\n        data.onSave(this);\r\n    }\r\n\r\n    public writeArray(arr: ISave[]) {\r\n        this.writeU8(arr.length);\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.write(arr[i]);\r\n        }\r\n    }\r\n\r\n    public isCorrupted() {\r\n        return this.offset > this.length;\r\n    }\r\n\r\n    private checkCorruption() {\r\n        if (this.isCorrupted())\r\n            throw new Error('Save is corrupted');\r\n    }\r\n\r\n    public readU8() {\r\n        let value = this.u8[this.offset];\r\n        this.offset += 1;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readU16() {\r\n        let value = this.dataview.getUint16(this.offset, Save.LITTLE_ENDIAN);\r\n        this.offset += 2;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readU32() {\r\n        let value = this.dataview.getUint32(this.offset, Save.LITTLE_ENDIAN);\r\n        this.offset += 4;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readF64() {\r\n        let value = this.dataview.getFloat64(this.offset, Save.LITTLE_ENDIAN);\r\n        this.offset += 8;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readBoolean() {\r\n        return this.readU8() == 1;\r\n    }\r\n\r\n    public readString() {\r\n        let value = '';\r\n        while (this.u8[this.offset] != 0) {\r\n            value += String.fromCharCode(this.readU8());\r\n        }\r\n        this.offset += 1;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public load(data: ISave) {\r\n        data.onLoad(this);\r\n    }\r\n\r\n    public loadArray(arr: ISave[]) {\r\n        let length = this.readU8();\r\n        for (let i = 0; i < length; ++i) {\r\n            this.load(arr[i]);\r\n        }\r\n    }\r\n}", "import Application from '../Application';\r\nimport Achievement from './Achievement';\r\nimport Decoration from './components/Decoration';\r\nimport Explosion from './components/Explosion';\r\nimport Overlay from './components/Overlay';\r\nimport Planet from './components/Planet';\r\nimport PlanetHit from './components/PlanetHit';\r\nimport Rocket from './components/Rocket';\r\nimport Target from './components/Target';\r\nimport Epoch from './Epoch';\r\nimport { ISave, Save } from './saves';\r\n\r\nexport default class Game implements ISave {\r\n    /** Detects if the user is using a mobile device */\r\n    public static readonly isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    /** Mouse object */\r\n    public static readonly mouse = { x: 0, y: 0, click: false };\r\n    /** Game instance */\r\n    public static instance: Game | null = null;\r\n    /** Used in `dev` variable */\r\n    public readonly Achievement = Achievement;\r\n    /** Rockets spawned in the game in the current moment */\r\n    public readonly rockets: Rocket[] = [];\r\n    /** Hits spawned in the game in the current moment */\r\n    public readonly hits: PlanetHit[] = [];\r\n    /** Effects spawned in the game in the current moment */\r\n    public readonly explosions: Explosion[] = [];\r\n    /** Decorations of the planet in the current moment */\r\n    public readonly decorations: Decoration[] = [];\r\n    /** Game epoch */\r\n    public readonly epoch = new Epoch();\r\n    /** Current game level */\r\n    public level;\r\n    /** Current game score */\r\n    public score = 0;\r\n\r\n    public constructor(\r\n        public readonly app: Application,\r\n        public readonly overlay: Overlay,\r\n        public readonly planet: Planet,\r\n        public readonly target: Target\r\n    ) {\r\n        Game.instance = this;\r\n\r\n        this.level = Math.round(this.epoch.multipliers.level);\r\n\r\n        if (Game.isMobile) {\r\n            window.addEventListener('touchstart', this.onTouchStart.bind(this));\r\n            window.addEventListener('touchend', this.onTouchEnd.bind(this));\r\n            window.addEventListener('touchcancel', this.onTouchEnd.bind(this));\r\n            window.addEventListener('touchmove', this.onTouchMove.bind(this));\r\n        } else {\r\n            window.addEventListener('mousedown', this.onMouseStart.bind(this));\r\n            window.addEventListener('mouseup', this.onMouseEnd.bind(this));\r\n            window.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n        }\r\n\r\n        window.addEventListener('beforeunload', () => {\r\n            const save = new Save();\r\n            save.write(this);\r\n            save.toLocalStorage();\r\n        });\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(Save.VERSION);\r\n        save.writeU32(this.level);\r\n        save.writeF64(this.score);\r\n        // dont save the planet\r\n        save.write(this.overlay);\r\n        save.write(this.epoch);\r\n        save.writeArray(Achievement.all);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        if (save.readU8() != Save.VERSION) {\r\n            if (prompt('This save is from an older version of the game. Do you want to delete it (yes/no)?') != 'yes')\r\n                return;\r\n        }\r\n        let level = save.readU32();\r\n        this.score = save.readF64();\r\n        save.load(this.overlay);\r\n        save.load(this.epoch);\r\n        // epoch challenge gives 1 more level per restart\r\n        this.planet.postLoad(level);\r\n        this.level -= 1;\r\n        // epoch cost multiplier exists\r\n        this.overlay.postLoad();\r\n        save.loadArray(Achievement.all);\r\n    }\r\n\r\n    private setMousePosition(x: number, y: number) {\r\n        Game.mouse.x = x * window.devicePixelRatio;\r\n        Game.mouse.y = y * window.devicePixelRatio;\r\n    }\r\n\r\n    private onMouseStart(e: MouseEvent) {\r\n        if (e.button == 0) Game.mouse.click = true;\r\n        this.onMouseMove(e);\r\n    }\r\n\r\n    private onMouseMove(e: MouseEvent) {\r\n        this.setMousePosition(e.clientX, e.clientY);\r\n    }\r\n\r\n    private onMouseEnd(e: MouseEvent) {\r\n        if (e.button == 0) Game.mouse.click = false;\r\n        this.onMouseMove(e);\r\n    }\r\n\r\n    private onTouchStart(e: TouchEvent) {\r\n        Game.mouse.click = true;\r\n        this.onTouchMove(e);\r\n    }\r\n\r\n    private onTouchMove(e: TouchEvent) {\r\n        let touch = e.touches[0];\r\n        this.setMousePosition(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    private onTouchEnd(_: TouchEvent) {\r\n        Game.mouse.click = false;\r\n    }\r\n\r\n    public clearRockets() {\r\n        for (let rocket of this.rockets) {\r\n            rocket.entity.destroy();\r\n        }\r\n        this.rockets.splice(0, this.rockets.length);\r\n    }\r\n\r\n    public clearHits() {\r\n        for (let hit of this.hits) {\r\n            hit.entity.destroy();\r\n        }\r\n        this.hits.splice(0, this.hits.length);\r\n    }\r\n\r\n    public clearExplosions() {\r\n        for (let explosion of this.explosions) {\r\n            explosion.entity.destroy();\r\n        }\r\n        this.explosions.splice(0, this.explosions.length);\r\n    }\r\n\r\n    public clearTrees() {\r\n        for (let tree of this.decorations) {\r\n            tree.entity.destroy();\r\n        }\r\n        this.decorations.splice(0, this.decorations.length);\r\n    }\r\n\r\n    public clearAll() {\r\n        this.clearRockets();\r\n        this.clearHits();\r\n        this.clearExplosions();\r\n        this.clearTrees();\r\n    }\r\n\r\n    /** speedhack */\r\n    public getTimeSpeed(): number {\r\n        return this.epoch.multipliers.time;\r\n    }\r\n\r\n    public reset() {\r\n        this.score = 0;\r\n        this.level = Math.round(this.epoch.multipliers.level);\r\n        this.clearAll();\r\n        this.planet.reset();\r\n        this.overlay.resetUpgrades();\r\n    }\r\n\r\n    public static format(n: number, digits = 0): string {\r\n        if (n > 1e6)\r\n            return n.toExponential(2);\r\n        return n.toFixed(digits);\r\n    }\r\n}", "import Game from './Game';\r\nimport { ISave, Save } from './saves';\r\n\r\nexport default class Achievement implements ISave {\r\n    private static ID = 0;\r\n    public static readonly all: Achievement[] = [];\r\n    public readonly id = Achievement.ID++;\r\n    public isUnlocked = false;\r\n\r\n    public constructor(public readonly name: string, public readonly description: [string, string], public readonly reward: string | null, public readonly onUnlock: ((g: Game) => void) | null) {\r\n        Achievement.all.push(this);\r\n    }\r\n\r\n    public unlock(showIt = true) {\r\n        if (this.isUnlocked) return;\r\n        if (showIt) Game.instance!.overlay.pushAchievement(this);\r\n        if (this.onUnlock) this.onUnlock(Game.instance!);\r\n        this.isUnlocked = true;\r\n    }\r\n\r\n    public static unlock(name: string, showIt = true) {\r\n        for (let i = 0, l = Achievement.all.length; i < l; ++i) {\r\n            if (Achievement.all[i].name == name) {\r\n                Achievement.all[i].unlock(showIt);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(this.id);\r\n        save.writeBoolean(this.isUnlocked);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        if (this.id != save.readU8()) {\r\n            save.readBoolean();\r\n            return;\r\n        }\r\n        this.isUnlocked = save.readBoolean();\r\n        if (this.isUnlocked && this.onUnlock)\r\n            this.onUnlock(Game.instance!);\r\n    }\r\n}", "import { CursorStyle } from '../../Canvas';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport Component from './Component';\r\nimport Planet from './Planet';\r\n\r\nexport default class Target implements Component {\r\n    public static readonly ACTIVE_TIME = 2;\r\n    public x = 0;\r\n    public y = 0;\r\n    public angle = 0;\r\n    public hidden = true;\r\n    public canClick = false;\r\n\r\n    private holding = false;\r\n    private lastClickTimer = 0;\r\n\r\n    public init(_: Entity) {}\r\n\r\n    public update(dt: number) {\r\n        if (!this.canClick) return;\r\n\r\n        const game = Game.instance!,\r\n            canvas = game.app.window.canvas,\r\n            mouse = Game.mouse;\r\n\r\n        let mx = mouse.x - canvas.cachedWidth / 2,\r\n            my = mouse.y - canvas.cachedHeight / 2;\r\n\r\n        if (mx * mx + my * my < Planet.SIZE_SQUARE * canvas.windowScale * canvas.windowScale) {\r\n            game.app.setCursorStyle(CursorStyle.Pointer);\r\n            if (mouse.click && !this.holding) {\r\n                this.x = mouse.x;\r\n                this.y = mouse.y;\r\n                this.angle = Math.atan2(my, mx);\r\n                this.hidden = false;\r\n                this.lastClickTimer = 0;\r\n                this.holding = true;\r\n            } else if (!mouse.click) {\r\n                this.holding = false;\r\n            }\r\n        }\r\n\r\n        if (this.hidden) return;\r\n\r\n        const planet = game.planet;\r\n\r\n        this.lastClickTimer += dt * planet.getTimeMultiplier();\r\n\r\n        if (this.lastClickTimer > Target.ACTIVE_TIME) {\r\n            this.lastClickTimer = 0;\r\n            this.hidden = true;\r\n        }\r\n    }\r\n\r\n    public alpha() {\r\n        return Math.max(0, 1 - this.lastClickTimer / Target.ACTIVE_TIME);\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Epoch from '../../Epoch';\r\nimport Game from '../../Game';\r\nimport Overlay, { Scene } from '../Overlay';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport default class OverlayUI implements UI {\r\n    private overlay: Overlay = null!;\r\n\r\n    public init(entity: Entity<{ base: Overlay }>): void {\r\n        this.overlay = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        switch (this.overlay.scene) {\r\n            case Scene.Menu:\r\n                this.renderMenu(ctx, ui);\r\n                break;\r\n            case Scene.Game:\r\n                this.renderGame(ctx, ui);\r\n                break;\r\n            case Scene.Epoch:\r\n                this.renderEpoch(ctx, ui);\r\n                break;\r\n            case Scene.Challenges:\r\n                this.renderChallenges(ctx, ui);\r\n                break;\r\n        }\r\n        this.renderAchievement(ctx, ui);\r\n    }\r\n\r\n    private renderMenu(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, ui.height);\r\n\r\n        let logo = this.overlay.logoImage,\r\n            logoSize = 400 * ui.winScale;\r\n\r\n        if (logo.complete) ctx.drawImage(\r\n            logo,\r\n            ui.x - logoSize / 2,\r\n            ui.y - logoSize / 2 - 150 * ui.winScale,\r\n            logoSize, logoSize\r\n        );\r\n\r\n        this.overlay.play.render(ctx, ui);\r\n    }\r\n\r\n    private renderGame(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        const game = Game.instance!;\r\n\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, 40 * ui.winScale);\r\n\r\n        ctx.fillStyle = '#fff';\r\n        ctx.font = 26 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText('PLANET DESTROYER', 7 * ui.winScale, 20 * ui.winScale);\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText(Game.format(game.score) + ' score', ui.width / 2, 20 * ui.winScale);\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillText('Level ' + game.level, ui.width / 2, 72 * ui.winScale);\r\n\r\n        let upgrades = this.overlay.upgrades;\r\n\r\n        // upgrades are inlined\r\n        upgrades[0].options.offsetX = 180;\r\n        upgrades[0].options.offsetY = -40;\r\n        upgrades[0].render(ctx, ui);\r\n\r\n        upgrades[1].options.offsetX = 180 + 340;\r\n        upgrades[1].options.offsetY = -40;\r\n        upgrades[1].render(ctx, ui);\r\n\r\n        upgrades[2].options.screenX = 1;\r\n        upgrades[2].options.offsetX = -180 - 340;\r\n        upgrades[2].options.offsetY = -40;\r\n        upgrades[2].render(ctx, ui);\r\n\r\n        upgrades[3].options.screenX = 1;\r\n        upgrades[3].options.offsetX = -180;\r\n        upgrades[3].options.offsetY = -40;\r\n        upgrades[3].render(ctx, ui);\r\n\r\n        this.renderEpochGain(ctx, ui, game.epoch.calculateProgress(game.level), game);\r\n        this.renderRocketButtons(ctx, ui);\r\n\r\n        if (game.epoch.isInChallenge()) this.overlay.endChallenge.render(ctx, ui);\r\n    }\r\n\r\n    private renderRocketButtons(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        if (!this.overlay.rocketButtonsEnabled) return;\r\n\r\n        const buttons = this.overlay.rocketButtons;\r\n\r\n        let w = 80+4,\r\n            h = 80+4,\r\n            l = buttons.length;\r\n\r\n        for (let i = 0; i < l; ++i) {\r\n            let k = buttons[i].length,\r\n                fw = w * k;\r\n\r\n            for (let j = 0; j < k; ++j) {\r\n                let button = buttons[i][j];\r\n                button.options.offsetX = (j+0.5) * w - fw / 2;\r\n                button.options.offsetY = -(i+0.75) * h;\r\n                button.render(ctx, ui);\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderEpochGain(ctx: CanvasRenderingContext2D, ui: UIContext, progress: number, game: Game) {\r\n        if (progress < 0.5) return;\r\n\r\n        if (progress < 1) {\r\n            const progressBarSize = 300 * ui.winScale;\r\n\r\n            ctx.beginPath();\r\n            ctx.roundRect(ui.width / 2 - progressBarSize / 2, 94 * ui.winScale, progressBarSize, 24 * ui.winScale, 12 * ui.winScale);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0,0,0,0.25)';\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.roundRect(ui.width / 2 - progressBarSize / 2, 94 * ui.winScale, progressBarSize * progress, 24 * ui.winScale, 12 * ui.winScale);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgb(218,255,55)';\r\n            ctx.fill();\r\n            return;\r\n        }\r\n\r\n        this.overlay.newEpoch.text = Game.format(game.epoch.calculatePoints(game.level)) + ' EP GAIN';\r\n        this.overlay.newEpoch.render(ctx, ui);\r\n    }\r\n\r\n    private renderEpoch(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        const game = Game.instance!;\r\n\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, ui.height);\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = 'rgb(218,255,55)';\r\n        ctx.fillText(Game.format(game.epoch.points) + ' Epoch Points', ui.width / 2, 36 * ui.winScale);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillStyle = 'rgb(127, 148, 33)';\r\n        ctx.fillText(game.epoch.count + ' Epoch', ui.width / 2, (36 + 24 + 4) * ui.winScale );\r\n\r\n        for (let i = 0, l = this.overlay.epochUpgrades.length; i < l; ++i) {\r\n            let upgrade = this.overlay.epochUpgrades[i];\r\n            upgrade.options.offsetY = 130 * (i + 1);\r\n            upgrade.render(ctx, ui);\r\n        }\r\n\r\n        this.overlay.startEpoch.render(ctx, ui);\r\n        this.overlay.challenges.render(ctx, ui);\r\n    }\r\n\r\n    private renderChallenges(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, ui.height);\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = 'rgb(255, 55, 55)';\r\n        ctx.fillText('Challenges', ui.width / 2, 36 * ui.winScale);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillStyle = 'rgb(194, 43, 43)';\r\n        ctx.fillText('To complete the challenge you need to start new epoch', ui.width / 2, (36 + 24 + 4) * ui.winScale );\r\n\r\n        for (let i = 0, l = this.overlay.challengeButtons.length; i < l; ++i) {\r\n            let btn = this.overlay.challengeButtons[i];\r\n            btn.options.offsetY = 130 * (i + 1);\r\n            btn.render(ctx, ui);\r\n        }\r\n\r\n        this.overlay.epoch.render(ctx, ui);\r\n    }\r\n\r\n    private renderAchievement(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        const achievement = this.overlay.getAchievement();\r\n\r\n        if (!achievement) return;\r\n\r\n        let p = ui.winScale,\r\n            w = 500 * p,\r\n            h = 108 * p - (achievement.reward ? 0 : (16+5) * p),\r\n            x = 20 * p,\r\n            y = 20 * p;\r\n\r\n        ctx.globalAlpha = this.overlay.achievementAlpha();\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(x, y, w, h, 16);\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.font = 24 * p + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillText(achievement.name, x + 16 * p, y + 16 * p);\r\n        ctx.fillStyle = '#ccc';\r\n        ctx.font = 16 * p + 'px Ubuntu';\r\n        ctx.fillText(achievement.description[0], x + 16 * p, y + (24+16+2) * p);\r\n        ctx.fillText(achievement.description[1], x + 16 * p, y + (24+16+2+16+2) * p);\r\n\r\n        if (achievement.reward) {\r\n            ctx.fillStyle = '#fff';\r\n            ctx.fillText('Reward: ' + achievement.reward, x + 16 * p, y + (24+16+2+16+2+16+5) * p);\r\n        }\r\n\r\n        ctx.globalAlpha = 1;\r\n    }\r\n}", "import Entity from '../../Entity';\nimport Planet from '../Planet';\nimport { UI, UIContext } from './UI';\n\nexport default class PlanetUI implements UI {\r\n    public planet: Planet = null!;\r\n\r\n    init(entity: Entity<{ base: Planet }>): void {\r\n        this.planet = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        for (let i = 0, l = this.planet.layers.length; i < l; ++i) {\r\n            let layer = this.planet.layers[i];\r\n            ctx.beginPath();\r\n            ctx.arc(ui.x, ui.y, layer.radius * ui.winScale, 0, 2 * Math.PI);\r\n            ctx.closePath();\r\n            ctx.fillStyle = layer.color;\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(ui.x, ui.y, this.planet.centerAreaRadius() * ui.winScale, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#e66';\r\n        ctx.fill();\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Target from '../Target';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport default class TargetUI implements UI {\r\n    private static readonly PATH = new Path2D('M.2952-.0401V-.2993H.036v.1074H-.0401V-.2993H-.2993v.2592h.1074V.036H-.2993V.2952h.2592V.1878H.036V.2952H.2952V.036H.1878V-.0401H.2952Zm.0713 0H.4958V.036H.3665V.3665H.036V.4958H-.0401V.3665H-.3707V.036H-.5V-.0401h.1293V-.3707h.3306V-.5H.036v.1293H.3665v.3305Z');\r\n    private target: Target = null!;\r\n\r\n    public init(entity: Entity<{ base: Target }>): void {\r\n        this.target = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        if (this.target.hidden) return;\r\n        let size = 150 * ui.winScale;\r\n        ctx.translate(this.target.x, this.target.y);\r\n        ctx.scale(size, size);\r\n        ctx.globalAlpha = this.target.alpha();\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fill(TargetUI.PATH);\r\n        ctx.globalAlpha = 1;\r\n        ctx.resetTransform();\r\n    }\r\n}", "import Application from './Application';\r\nimport Achievement from './game/Achievement';\r\nimport Overlay from './game/components/Overlay';\r\nimport Planet from './game/components/Planet';\r\nimport Target from './game/components/Target';\r\nimport OverlayUI from './game/components/ui/Overlay';\r\nimport PlanetUI from './game/components/ui/Planet';\r\nimport TargetUI from './game/components/ui/Target';\r\nimport Game from './game/Game';\r\nimport { Save } from './game/saves';\r\n\r\n// Achievements\r\nnew Achievement('Level 10', ['Reach level 10', 'Easy start'], '+10% rockets speed', g => g.epoch.multipliers.speed *= 1.1);\r\nnew Achievement('One Million', ['Reach 1.000.000 score', ''], '+10% score', g => g.epoch.multipliers.score += 0.1);\r\nnew Achievement('First Epoch', ['Get your first epoch', 'Prestige at level 100+'], '4x reset speed', g => g.epoch.multipliers.reset /= 4);\r\nnew Achievement('Level 1000', ['Reach level 1000', ''], '+50% rockets power', g => g.epoch.multipliers.power += 0.5);\r\nnew Achievement('Evolution', ['Reach 1.000.000 EP', ''], '2x EP gain', g => g.epoch.multipliers.epoch *= 2);\r\nnew Achievement('The End', ['Reach level 10000', 'At the end of the game'], '`dev` variable unlocked in console', g => (window as any)['dev'] = g);\r\n\r\n// Rocket Layer 1\r\nnew Achievement('Rocket 2', ['Reach level 3', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 1));\r\nnew Achievement('Rocket 3', ['Reach level 7', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 2));\r\nnew Achievement('Rocket 4', ['Reach level 15', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 3));\r\nnew Achievement('Rocket 5', ['Reach level 25', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 4));\r\n\r\n// Rocket Layer 2\r\nnew Achievement('Rocket 6', ['Reach level 40', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(1, 0));\r\nnew Achievement('Rocket 7', ['Reach level 60', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(1, 1));\r\nnew Achievement('Rocket 8', ['Reach level 80', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(1, 2));\r\n\r\nconst app = new Application();\r\n\r\nconst overlay = new Overlay();\r\nconst planet = new Planet();\r\nconst target = new Target();\r\n\r\nconst game = new Game(app, overlay, planet, target);\r\n\r\napp.spawn({ base: overlay, ui: new OverlayUI() });\r\napp.spawn({ base: planet, ui: new PlanetUI() });\r\napp.spawn({ base: target, ui: new TargetUI() });\r\n\r\nconst save = Save.fromLocalStorage();\r\n\r\nif (save) {\r\n    try {\r\n        save.load(game);\r\n    } catch (e: any) {\r\n        if (e.message.includes('Invalid'))\r\n            alert(e.message);\r\n        else\r\n            console.error(e);\r\n    }\r\n}\r\n\r\napp.run();"],
  "mappings": "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",
  "names": ["Tag", "name", "parent", "Canvas", "Tag", "e", "width", "height", "ratio", "style", "Entity", "app", "components", "keys", "i", "l", "comp", "name", "Styles", "Tag", "name", "styles", "key", "Window", "Canvas", "Styles", "_Application", "Window", "now", "a", "b", "ctx", "canvas", "ui", "entity", "entityBase", "entityUI", "components", "Entity", "style", "Application", "_Button", "text", "options", "ctx", "ui", "opt", "measure", "img", "width", "height", "scale", "strokeWidth", "Game", "mouse", "w", "h", "x", "y", "textSize", "textColor", "cache", "canvas", "metrics", "output", "Button", "ChallengeBtn", "Button", "challenge", "ctx", "ui", "measure", "width", "textOffset", "height", "ChallengesBtn", "Button", "Game", "EndChallengeBtn", "Button", "game", "Game", "EpochUpgrade", "Button", "name", "text", "cost", "ctx", "ui", "measure", "width", "textOffset", "height", "Game", "game", "count", "i", "save", "CostMultiplier", "EpochUpgrade", "game", "Game", "PenetrationChance", "EpochUpgrade", "game", "Game", "Collider", "_Collider", "data", "other", "noRadius", "c1", "c2", "dx", "dy", "r", "Decoration", "x", "y", "size", "angle", "type", "entity", "Game", "DecorationUI", "entity", "ctx", "ui", "planet", "Game", "scale", "size", "PlanetHitUI", "entity", "ctx", "ui", "scale", "Game", "RocketUI", "_RocketUI", "entity", "ctx", "ui", "size", "x", "y", "angle", "flags", "long", "sharp", "hammer", "white", "triangle", "longer", "h", "Explosion", "planet", "x", "y", "size", "explosionTime", "entity", "Game", "dt", "explosions", "Planet", "ExplosionUI", "entity", "ctx", "ui", "scale", "Game", "PlanetHit", "x", "y", "size", "Collider", "entity", "Game", "planet", "Explosion", "ExplosionUI", "TAU", "shortAngleDist", "a0", "a1", "da", "angleLerp", "distance", "x", "y", "Rocket", "_Rocket", "size", "damage", "speed", "gravity", "Collider", "game", "Game", "entity", "dt", "planet", "time", "Planet", "cos", "sin", "width", "Explosion", "ExplosionUI", "limit", "multipliers", "dist", "gravityPower", "PlanetHit", "PlanetHitUI", "scale", "useTarget", "rocket", "amount", "angle", "RocketUI", "planetPalette", "_Planet", "Collider", "entity", "dt", "game", "Game", "time", "rocketInterval", "Rocket", "timeSpeed", "fullRespawn", "giveScore", "Achievement", "palette", "amount", "i", "angle", "Decoration", "DecorationUI", "layersPalette", "height", "middleRadius", "collider", "hit", "reset", "radians", "sin", "explosion", "deco", "level", "Planet", "PlanetResetUpgrade", "EpochUpgrade", "game", "Planet", "Game", "PowerMultiplier", "EpochUpgrade", "game", "Game", "ScoreMultiplier", "EpochUpgrade", "game", "Game", "TimeMultiplier", "EpochUpgrade", "game", "Game", "EpochBtn", "Button", "Game", "NewEpochBtn", "Button", "Game", "PlayBtn", "Button", "game", "Game", "RocketBtn", "Button", "config", "reloadTime", "unlocked", "ctx", "ui", "measure", "cos", "sin", "scale", "RocketUI", "game", "Game", "planet", "rocket", "Rocket", "RocketLayers_default", "RocketBtn", "r", "NewEpochBtn", "Button", "game", "Game", "Upgrade", "Button", "name", "cost", "maxLevel", "ctx", "ui", "measure", "width", "description", "descLength", "textOffset", "height", "Game", "i", "game", "count", "save", "GravityUpgrade", "Upgrade", "game", "Game", "LessIntervalUpgrade", "Upgrade", "game", "Game", "PowerUpgrade", "Upgrade", "game", "Game", "SpeedUpgrade", "Upgrade", "game", "Game", "_Overlay", "PowerUpgrade", "LessIntervalUpgrade", "SpeedUpgrade", "GravityUpgrade", "PowerMultiplier", "ScoreMultiplier", "CostMultiplier", "TimeMultiplier", "PenetrationChance", "PlanetResetUpgrade", "RocketLayers_default", "PlayBtn", "NewEpochBtn", "ChallengesBtn", "EpochBtn", "EndChallengeBtn", "entity", "Game", "challenge", "ChallengeBtn", "dt", "achievement", "upgrade", "layer", "index", "rocketLayer", "rocket", "save", "Overlay", "Challenge", "name", "description", "reward", "game", "Game", "Application", "completed", "save", "ActiveChallenge", "Challenge", "game", "EpochChallenge", "Challenge", "game", "OfflineChallenge", "Challenge", "game", "layer", "rocket", "_Epoch", "OfflineChallenge", "ActiveChallenge", "EpochChallenge", "game", "Game", "Achievement", "level", "save", "challengeIndex", "Epoch", "_Save", "u8", "length", "storage", "char", "byte", "newU8", "value", "i", "data", "arr", "Save", "_Game", "app", "overlay", "planet", "target", "Achievement", "Epoch", "save", "Save", "level", "x", "y", "touch", "_", "rocket", "hit", "explosion", "tree", "n", "digits", "Game", "_Achievement", "name", "description", "reward", "onUnlock", "showIt", "Game", "l", "save", "Achievement", "_Target", "_", "dt", "game", "Game", "canvas", "mouse", "mx", "my", "Planet", "planet", "Target", "OverlayUI", "entity", "ctx", "ui", "logo", "logoSize", "game", "Game", "upgrades", "buttons", "w", "h", "l", "i", "k", "fw", "j", "button", "progress", "progressBarSize", "upgrade", "btn", "achievement", "p", "x", "y", "PlanetUI", "entity", "ctx", "ui", "l", "layer", "_TargetUI", "entity", "ctx", "ui", "size", "TargetUI", "Achievement", "g", "app", "Application", "overlay", "Overlay", "planet", "Planet", "target", "Target", "game", "Game", "OverlayUI", "PlanetUI", "TargetUI", "save", "Save", "e"]
}
