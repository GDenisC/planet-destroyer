{
  "version": 3,
  "sources": ["../src/Tag.ts", "../src/Canvas.ts", "../src/game/Entity.ts", "../src/Styles.ts", "../src/Window.ts", "../src/Application.ts", "../src/game/Button.ts", "../src/game/buttons/ChallengeBtn.ts", "../src/game/buttons/ChallengesBtn.ts", "../src/game/buttons/EndChallengeBtn.ts", "../src/game/buttons/epoch/EpochUpgrade.ts", "../src/game/buttons/epoch/CostMultiplier.ts", "../src/game/buttons/epoch/PenetrationChance.ts", "../src/game/Collider.ts", "../src/game/components/Decoration.ts", "../src/game/components/ui/Decoration.ts", "../src/game/components/ui/PlanetHit.ts", "../src/game/components/ui/Rocket.ts", "../src/game/components/Explosion.ts", "../src/game/components/ui/Explosion.ts", "../src/game/components/PlanetHit.ts", "../src/game/components/Rocket.ts", "../src/game/components/Planet.ts", "../src/game/buttons/epoch/PlanetResetUpgrade.ts", "../src/game/buttons/epoch/PowerMultiplier.ts", "../src/game/buttons/epoch/ScoreMultiplier.ts", "../src/game/buttons/epoch/TimeMultiplier.ts", "../src/game/buttons/EpochBtn.ts", "../src/game/buttons/NewEpochBtn.ts", "../src/game/buttons/PlayBtn.ts", "../src/game/buttons/rockets/RocketBtn.ts", "../src/game/buttons/rockets/RocketLayers.ts", "../src/game/buttons/StartEpochBtn.ts", "../src/game/buttons/upgrade/Upgrade.ts", "../src/game/buttons/upgrade/GravityUpgrade.ts", "../src/game/buttons/upgrade/LessIntervalUpgrade.ts", "../src/game/buttons/upgrade/PowerUpgrade.ts", "../src/game/buttons/upgrade/SpeedUpgrade.ts", "../src/game/components/Overlay.ts", "../src/game/challenges/Challenge.ts", "../src/game/challenges/ActiveChallenge.ts", "../src/game/challenges/EpochChallenge.ts", "../src/game/challenges/OfflineChallenge.ts", "../src/game/Epoch.ts", "../src/game/saves/Save.ts", "../src/game/Game.ts", "../src/game/Achievement.ts", "../src/game/components/Target.ts", "../src/game/components/ui/Overlay.ts", "../src/game/components/ui/Planet.ts", "../src/game/components/ui/Target.ts", "../src/index.ts"],
  "sourcesContent": ["export default class Tag<T extends HTMLElement> {\r\n    protected html: T;\r\n    protected parent: Node | null = null;\r\n\r\n    public constructor(name: keyof HTMLElementTagNameMap) {\r\n        this.html = document.createElement(name) as T;\r\n    }\r\n\r\n    public setParent(parent: Node | null) {\r\n        if (parent) {\r\n            parent.appendChild(this.html);\r\n        } else {\r\n            this.parent?.removeChild(this.html);\r\n        }\r\n        this.parent = parent;\r\n    }\r\n}", "import Tag from './Tag';\r\n\r\nexport const enum CursorStyle {\r\n    Default = 'default',\r\n    Pointer = 'pointer'\r\n}\r\n\r\nexport default class Canvas extends Tag<HTMLCanvasElement> {\r\n    public cachedWidth: number = 0;\r\n    public cachedHeight: number = 0;\r\n    public windowScale: number = 1;\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    public constructor() {\r\n        super('canvas');\r\n        this.ctx = this.html.getContext('2d') as CanvasRenderingContext2D;\r\n        this.html.addEventListener('contextmenu', e => e.preventDefault());\r\n    }\r\n\r\n    public resize(width: number, height: number, ratio: number) {\r\n        width *= ratio;\r\n        height *= ratio;\r\n\r\n        this.html.width = this.cachedWidth = width;\r\n        this.html.height = this.cachedHeight = height;\r\n\r\n        this.windowScale = Math.max(width / 1920, height / 1080);\r\n    }\r\n\r\n    public setCursorStyle(style: CursorStyle) {\r\n        this.html.style.cursor = style;\r\n    }\r\n}", "import Application from '../Application';\r\nimport Component from './components/Component';\r\nimport { Order } from './Order';\r\n\r\nexport default class Entity<T extends Record<string, Component> = {}> {\r\n    private readonly components = {} as T;\r\n    public zOrder = Order.Default;\r\n    public destroyed = false;\r\n\r\n    public constructor(public readonly app: Application, components: Record<string, Component>) {\r\n        let keys = Object.keys(components);\r\n        for (let i = 0, l = keys.length; i < l; ++i) {\r\n            let comp = components[keys[i]];\r\n            comp.init(this);\r\n            (this as any).components[keys[i]] = comp;\r\n        }\r\n    }\r\n\r\n    public getComponent<S extends keyof T>(name: S): T[S] {\r\n        return this.components[name] as T[S];\r\n    }\r\n\r\n    public cleanup() {\r\n        for (let name in this.components) {\r\n            delete this.components[name];\r\n        }\r\n    }\r\n\r\n    public destroy() {\r\n        this.destroyed = true;\r\n    }\r\n}", "import Tag from './Tag';\r\n\r\nexport default class Styles extends Tag<HTMLStyleElement> {\r\n    public constructor() {\r\n        super('style');\r\n\r\n        this.addStyle('body', { margin: 0, overflow: 'hidden' });\r\n        this.addStyle('canvas', { width: '100vw', height: '100vh' });\r\n        this.addStyle('@font-face', { fontFamily: 'Ubuntu', src: 'url(./Ubuntu.ttf)' });\r\n    }\r\n\r\n    public addStyle(name: string, styles: Record<string, { toString: () => string }>) {\r\n        this.html.innerHTML += name + '{' +\r\n            Object.keys(styles)\r\n                .map(\r\n                    key => key + ':' + styles[key].toString()\r\n                )\r\n                .join(';')\r\n            + '}';\r\n    }\r\n}", "import Canvas from './Canvas';\r\nimport Styles from './Styles';\r\n\r\nexport default class Window {\r\n    public readonly canvas = new Canvas();\r\n    public readonly styles = new Styles();\r\n\r\n    public constructor() {\r\n        this.canvas.setParent(document.body);\r\n        this.styles.setParent(document.head);\r\n    }\r\n}", "import { CursorStyle } from './Canvas';\r\nimport Component from './game/components/Component';\r\nimport { UI, UIContext } from './game/components/ui/UI';\r\nimport Entity from './game/Entity';\r\nimport Window from './Window';\r\n\r\nexport default class Application {\r\n    public static readonly now = 'performance' in window && 'now' in performance ? performance.now.bind(performance) : Date.now;\r\n    public readonly window = new Window();\r\n    public entities = new Set<Entity<{ base?: Component, ui?: UI }>>();\r\n    public dt = 0.0001; // 0 may cause NaN\r\n    public backgroundColor: `#${string}` = '#777';\r\n    public shakePower = 0;\r\n\r\n    private readonly cachedGameLoop: () => void = this.gameLoop.bind(this);\r\n    private readonly cachedCanvasResize = () => this.window.canvas.resize(window.innerWidth, window.innerHeight, window.devicePixelRatio);\r\n    private lastTime = 0; // checked in gameLoop\r\n    private entitiesSorted = false;\r\n\r\n    private gameLoop() {\r\n        let now = Application.now();\r\n        if (this.lastTime) {\r\n            this.dt = Math.min(1000 / 30, now - this.lastTime) / 1000;\r\n        }\r\n        this.lastTime = now;\r\n\r\n        if (!this.entitiesSorted) {\r\n            this.entities = new Set(Array.from(this.entities).sort((a, b) => a.zOrder - b.zOrder));\r\n            this.entitiesSorted = false;\r\n        }\r\n\r\n        let ctx = this.window.canvas.ctx,\r\n            canvas = this.window.canvas,\r\n            ui: UIContext = {\r\n                x: canvas.cachedWidth / 2,\r\n                y: canvas.cachedHeight / 2,\r\n                width: canvas.cachedWidth,\r\n                height: canvas.cachedHeight,\r\n                winScale: this.window.canvas.windowScale,\r\n                dt: this.dt\r\n            };\r\n\r\n        if (this.shakePower) {\r\n            ui.x += Math.random() * this.shakePower - this.shakePower / 2;\r\n            ui.y += Math.random() * this.shakePower - this.shakePower / 2;\r\n        }\r\n\r\n        ctx.fillStyle = this.backgroundColor;\r\n        ctx.fillRect(0, 0, canvas.cachedWidth, canvas.cachedHeight);\r\n\r\n        this.setCursorStyle(CursorStyle.Default);\r\n\r\n        for (let entity of Array.from(this.entities)) {\r\n            if (entity.destroyed) continue;\r\n            let entityBase = entity.getComponent('base'),\r\n                entityUI = entity.getComponent('ui');\r\n\r\n            // too lazy to make another interface\r\n            if (entityBase && 'update' in entityBase)\r\n                (entityBase as { update: (dt: number) => void }).update(this.dt);\r\n\r\n            if (entityUI) entityUI.render(ctx, ui);\r\n        }\r\n\r\n        for (let entity of this.entities) {\r\n            if (!entity.destroyed) continue;\r\n            entity.cleanup();\r\n            this.entities.delete(entity);\r\n        }\r\n\r\n        requestAnimationFrame(this.cachedGameLoop);\r\n    }\r\n\r\n    public run() {\r\n        window.addEventListener('resize', this.cachedCanvasResize);\r\n        window.addEventListener('focus', () => this.lastTime = Application.now());\r\n\r\n        this.cachedCanvasResize();\r\n        this.gameLoop();\r\n    }\r\n\r\n    public spawn<T extends Record<string, Component>>(components: T): Entity<T> {\r\n        let entity = new Entity<T>(this, components);\r\n        this.entities.add(entity);\r\n        this.entitiesSorted = false;\r\n        return entity;\r\n    }\r\n\r\n    public setCursorStyle(style: CursorStyle) {\r\n        this.window.canvas.setCursorStyle(style);\r\n    }\r\n}", "import { CursorStyle } from '../Canvas';\r\nimport { UIContext } from './components/ui/UI';\r\nimport Game from './Game';\r\n\r\nexport interface ButtonOptions {\r\n    offsetX: number,\r\n    offsetY: number,\r\n    screenX: number,\r\n    screenY: number,\r\n    width: number,\r\n    height: number,\r\n    fontSize: number,\r\n    fontColor: string,\r\n    strokeWidth: number,\r\n    strokeColor: string,\r\n    overStrokeColor: string,\r\n    pressStrokeColor: string,\r\n    rounding: number,\r\n    fillStyle: string\r\n}\r\n\r\nexport default abstract class Button {\r\n    public readonly options: ButtonOptions;\r\n    public mouseOver = false;\r\n    public isPressed = false;\r\n    public hidden = false;\r\n\r\n    private static readonly textCache = new Map<string, [TextMetrics, HTMLCanvasElement]>();\r\n    private clicked = false;\r\n\r\n    public constructor(public text: string, options: Partial<ButtonOptions>) {\r\n        this.options = Object.assign({\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            screenX: 0,\r\n            screenY: 0,\r\n            width: 150,\r\n            height: 50,\r\n            fontSize: 22,\r\n            fontColor: '#fff',\r\n            strokeWidth: 0,\r\n            strokeColor: '#fff',\r\n            overStrokeColor: '#fff',\r\n            pressStrokeColor: '#fff',\r\n            rounding: 0,\r\n            fillStyle: 'rgba(0,0,0,0.5)'\r\n        }, options);\r\n    }\r\n\r\n    public abstract onClick(): void;\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        if (this.hidden) return;\r\n\r\n        let opt = this.options,\r\n            measure = this.measure(ui);\r\n\r\n        this.update(ui.width, ui.height, ui.winScale, measure.width / 2);\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(measure.x, measure.y, measure.w, measure.h, measure.r);\r\n        ctx.closePath();\r\n\r\n        if (measure.width) {\r\n            ctx.strokeStyle = this.isPressed ? opt.pressStrokeColor : this.mouseOver ? opt.overStrokeColor : opt.strokeColor;\r\n            ctx.lineWidth = measure.width;\r\n            ctx.stroke();\r\n        }\r\n\r\n        ctx.fillStyle = opt.fillStyle\r\n        ctx.fill();\r\n\r\n        if (!this.options.fontSize) return;\r\n\r\n        let img = Button.getTextImageCached(this.text, opt.fontSize * ui.winScale, opt.fontColor);\r\n\r\n        ctx.drawImage(img[1], measure.x + measure.w / 2 - img[0].width / 2, measure.y + measure.h / 2 - opt.fontSize * ui.winScale / 2);\r\n    }\r\n\r\n    public update(width: number, height: number, scale: number, strokeWidth: number) {\r\n        this.mouseOver = this.isMouseOver(width, height, scale, strokeWidth);\r\n        this.isPressed = this.mouseOver && Game.mouse.click;\r\n\r\n        if (this.mouseOver) {\r\n            Game.instance!.app.setCursorStyle(CursorStyle.Pointer);\r\n            if (this.isPressed) {\r\n                this.clicked = true;\r\n            } else if (this.clicked) {\r\n                this.onClick();\r\n                this.clicked = false\r\n            }\r\n        } else {\r\n            this.clicked = false;\r\n        }\r\n    }\r\n\r\n    private isMouseOver(width: number, height: number, scale: number, strokeWidth: number): boolean {\r\n        let mouse = Game.mouse,\r\n            opt = this.options,\r\n            w = (opt.width / 2 + strokeWidth) * scale,\r\n            h = (opt.height / 2 + strokeWidth) * scale,\r\n            x = opt.offsetX * scale + opt.screenX * width,\r\n            y = opt.offsetY * scale + opt.screenY * height;\r\n\r\n        return (\r\n            mouse.x > x - w &&\r\n            mouse.x < x + w &&\r\n            mouse.y > y - h &&\r\n            mouse.y < y + h\r\n        );\r\n    }\r\n\r\n    protected measure(ui: UIContext) {\r\n        let opt = this.options,\r\n            w = opt.width * ui.winScale,\r\n            h = opt.height * ui.winScale;\r\n\r\n        return {\r\n            w, h,\r\n            x: opt.offsetX * ui.winScale + opt.screenX * ui.width - w / 2,\r\n            y: opt.offsetY * ui.winScale + opt.screenY * ui.height - h / 2,\r\n            r: opt.rounding * ui.winScale,\r\n            width: opt.strokeWidth * ui.winScale * 2\r\n        };\r\n    }\r\n\r\n    public static getTextImageCached(text: string, textSize: number, textColor: string): [TextMetrics, HTMLCanvasElement] {\r\n        let cache = Button.textCache.get(text + textSize + textColor);\r\n        if (cache) return cache;\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width = canvas.height = 1;\r\n        let ctx = canvas.getContext('2d')!;\r\n        ctx.font = `${textSize}px Ubuntu`;\r\n        let metrics = ctx.measureText(text);\r\n        canvas.width = metrics.width;\r\n        canvas.height = textSize;\r\n        ctx.font = `${textSize}px Ubuntu`;\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = textColor;\r\n        ctx.fillText(text, canvas.width / 2, canvas.height / 2);\r\n        let output = [metrics, canvas] as [TextMetrics, HTMLCanvasElement];\r\n        Button.textCache.set(text + textSize + textColor, output);\r\n        return output ;\r\n    }\r\n}", "import Button from '../Button';\r\nimport Challenge from '../challenges/Challenge';\r\nimport { UIContext } from '../components/ui/UI';\r\n\r\nexport default class ChallengeBtn extends Button {\r\n    public level = 0;\r\n\r\n    public constructor(public readonly challenge: Challenge) {\r\n        super('START', {\r\n            width: 120,\r\n            height: 40,\r\n            fontSize: 28,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(255, 55, 55)',\r\n            overStrokeColor: 'rgb(221, 61, 61)',\r\n            pressStrokeColor: 'rgb(255, 106, 106)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        let measure = this.measure(ui),\r\n            width = ui.width / 2,\r\n            textOffset = 20 * ui.winScale,\r\n            height = 60 * ui.winScale;\r\n\r\n        this.options.offsetX = width / 2 / ui.winScale;\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(\r\n            measure.x - 20 * ui.winScale,\r\n            measure.y - 20 * ui.winScale,\r\n            measure.w + width + 20 * ui.winScale,\r\n            measure.h + height,\r\n            16\r\n        );\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(42, 5, 5, 0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.textBaseline = 'middle';\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillText(this.challenge.name + ' Challenge ', measure.x + 140 * ui.winScale, measure.y + textOffset);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText(\r\n            this.challenge.completed\r\n                ? 'Completed in ' + this.challenge.completedTime!.toFixed(0) + 's'\r\n                : 'Uncompleted',\r\n            measure.x + width + 80 * ui.winScale, measure.y + textOffset * 1.5\r\n        );\r\n\r\n        ctx.font = 18 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.fillText(this.challenge.description + '. Reward: ' + this.challenge.reward, measure.x, measure.y + textOffset + 40 * ui.winScale);\r\n\r\n        super.render(ctx, ui);\r\n    }\r\n\r\n    public onClick(): void {\r\n        this.challenge.start();\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class ChallengesBtn extends Button {\r\n    public constructor() {\r\n        super('CHALLENGES', {\r\n            offsetX: -170,\r\n            offsetY: 40,\r\n            screenX: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'hsl(0, 64%, 71%)',\r\n            overStrokeColor: 'hsl(0, 100%, 86%)',\r\n            pressStrokeColor: 'hsl(0, 41.00%, 69.40%)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        Game.instance!.overlay.scene = Scene.Challenges;\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class EndChallengeBtn extends Button {\r\n    public constructor() {\r\n        super('END CHALLENGE', {\r\n            offsetX: -170,\r\n            offsetY: 80,\r\n            screenX: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(255, 55, 55)',\r\n            overStrokeColor: 'rgb(221, 61, 61)',\r\n            pressStrokeColor: 'rgb(255, 106, 106)',\r\n            rounding: 12\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n        game.epoch.currentChallenge?.end(false);\r\n        game.overlay.scene = Scene.Game;\r\n    }\r\n}", "import Button from '../../Button';\r\nimport { UIContext } from '../../components/ui/UI';\r\nimport Game from '../../Game';\r\nimport { ISave, Save } from '../../saves';\r\n\r\nexport default abstract class EpochUpgrade extends Button implements ISave {\r\n    public level = 0;\r\n\r\n    public constructor(public readonly name: string, text: string, public cost: number) {\r\n        super(text, {\r\n            width: 120,\r\n            height: 40,\r\n            fontSize: 28,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        let measure = this.measure(ui),\r\n            width = ui.width / 2,\r\n            textOffset = 20 * ui.winScale,\r\n            height = 60 * ui.winScale;\r\n\r\n        this.options.offsetX = width / 2 / ui.winScale;\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(\r\n            measure.x - 20 * ui.winScale,\r\n            measure.y - 20 * ui.winScale,\r\n            measure.w + width + 20 * ui.winScale,\r\n            measure.h + height,\r\n            16\r\n        );\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.textBaseline = 'middle';\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillText(this.name + ' Upgrade [' + this.level + ']', measure.x + 140 * ui.winScale, measure.y + textOffset);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText('Cost ' + Game.format(this.cost) + ' EP', measure.x + width + 80 * ui.winScale, measure.y + textOffset * 1.5);\r\n\r\n        ctx.font = 18 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.fillText(this.getDescription(), measure.x, measure.y + textOffset + 40 * ui.winScale);\r\n\r\n        super.render(ctx, ui);\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n\r\n        if (game.epoch.points < this.cost) return;\r\n        game.epoch.points -= this.cost;\r\n        this.onPurchase(game);\r\n        this.level += 1;\r\n    }\r\n\r\n    public abstract onPurchase(game: Game): void;\r\n    public abstract getDescription(): string;\r\n\r\n    public purchaseMany(game: Game, count: number) {\r\n        for (let i = 0; i < count; ++i)\r\n            this.onPurchase(game);\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(this.level);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        this.level = save.readU8();\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class CostMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Cost', 'x0.95', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.cost *= 0.95;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Decrease all rocket\\'s cost by 5% each upgrade. Current cost multiplier is ' + Game.instance!.epoch.multipliers.cost.toFixed(3);\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class PenetrationChance extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Penetration', '+1%', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        // fun fact: you can have more than 100% penetration\r\n        game.epoch.penetrationChance += 0.01;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Increase the change of rocket to penetrate the planet by 1%. Current penetration chance is ' + (Game.instance!.epoch.penetrationChance * 100).toFixed(0) + '%';\r\n    }\r\n}", "interface Circle {\r\n    x: number;\r\n    y: number;\r\n    radius: number;\r\n}\r\n\r\nexport default class Collider {\r\n    private data: Circle | null = null;\r\n\r\n    public update(data: Circle): void {\r\n        this.data = data;\r\n    }\r\n\r\n    public intersects(other: Collider, noRadius: boolean): boolean {\r\n        if (!this.data || !other.data) return false;\r\n        return Collider.circleIntersectCircle(this.data, other.data, noRadius);\r\n    }\r\n\r\n    private static circleIntersectCircle(c1: Circle, c2: Circle, noRadius: boolean): boolean {\r\n        let dx = c1.x - c2.x,\r\n            dy = c1.y - c2.y,\r\n            r = c1.radius + (noRadius ? 0 : c2.radius);\r\n        return dx * dx + dy * dy <= r * r;\r\n    }\r\n}", "import Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\n\r\nexport const enum DecorationType {\r\n    Hill,\r\n    Tree\r\n}\r\n\r\nexport default class Decoration implements Component {\r\n    public entity: Entity = null!;\r\n\r\n    public constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public size: number,\r\n        public angle: number,\r\n        public type: DecorationType\r\n    ) {}\r\n\r\n    public init(entity: Entity): void {\r\n        entity.zOrder = Order.Decoration;\r\n        this.entity = entity;\r\n        Game.instance!.decorations.push(this);\r\n    }\r\n}", "import Entity from '../../Entity';\nimport Game from '../../Game';\nimport Decoration, { DecorationType } from '../Decoration';\nimport { UI, UIContext } from './UI';\n\nexport default class DecorationUI implements UI {\r\n    private decoration: Decoration = null!;\r\n\r\n    public init(entity: Entity<{ base: Decoration }>): void {\r\n        this.decoration = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        let planet = Game.instance!.planet,\r\n            scale = ui.winScale / planet.scale,\r\n            size = this.decoration.size * scale;\r\n\r\n        ctx.translate(ui.x + this.decoration.x * ui.winScale, ui.y + this.decoration.y * ui.winScale);\r\n        if (this.decoration.type == DecorationType.Tree) ctx.rotate(this.decoration.angle);\r\n\r\n        ctx.fillStyle = planet.layers[0].color || '#ddd';\r\n\r\n        switch (this.decoration.type) {\r\n            case DecorationType.Hill:\r\n                ctx.beginPath();\r\n                ctx.arc(0, 0, this.decoration.size * scale, 0, 2 * Math.PI);\r\n                ctx.closePath();\r\n                ctx.fill();\r\n                break;\r\n            case DecorationType.Tree:\r\n                ctx.beginPath();\r\n                ctx.lineTo(size * 2, 0);\r\n                ctx.lineTo(-size * 0.1, size * 0.75);\r\n                ctx.lineTo(-size * 0.1, -size * 0.75);\r\n                ctx.closePath();\r\n                ctx.fill();\r\n                break;\r\n        }\r\n\r\n        ctx.resetTransform();\r\n    }\r\n}", "import Application from '../../../Application';\nimport Entity from '../../Entity';\nimport Game from '../../Game';\nimport PlanetHit from '../PlanetHit';\nimport { UI, UIContext } from './UI';\n\nexport default class PlanetHitUI implements UI {\r\n    private app: Application = null!;\r\n    private hit: PlanetHit = null!;\r\n\r\n    public init(entity: Entity<{ base: PlanetHit }>): void {\r\n        this.app = entity.app;\r\n        this.hit = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        let scale = Game.instance!.planet.scale;\r\n        ctx.beginPath();\r\n        ctx.arc(ui.x + this.hit.x * ui.winScale, ui.y + this.hit.y * ui.winScale, this.hit.size / scale * ui.winScale, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.app.backgroundColor;\r\n        ctx.fill();\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Rocket from '../Rocket';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport const enum RocketFlags {\r\n    None = 0,\r\n    Long = 1 << 0,\r\n    Sharp = 1 << 1,\r\n    Hammer = 1 << 2,\r\n    White = 1 << 3,\r\n    Triangle = 1 << 4,\r\n    Longer = 1 << 5\r\n}\r\n\r\nexport default class RocketUI implements UI {\r\n    public rocket: Rocket = null!;\r\n\r\n    init(entity: Entity<{ base: Rocket }>): void {\r\n        this.rocket = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        RocketUI.renderDummy(\r\n            ctx,\r\n            this.rocket.size * ui.winScale,\r\n            ui.x + this.rocket.x * ui.winScale,\r\n            ui.y + this.rocket.y * ui.winScale,\r\n            this.rocket.angle,\r\n            this.rocket.flags\r\n        );\r\n    }\r\n\r\n    public static renderDummy(ctx: CanvasRenderingContext2D, size: number, x: number, y: number, angle: number, flags: number) {\r\n        let long = (flags & RocketFlags.Long) != 0,\r\n            sharp = (flags & RocketFlags.Sharp) != 0,\r\n            hammer = (flags & RocketFlags.Hammer) != 0,\r\n            white = (flags & RocketFlags.White) != 0,\r\n            triangle = (flags & RocketFlags.Triangle) != 0,\r\n            longer = (flags & RocketFlags.Longer) != 0;\r\n\r\n        ctx.translate(x, y);\r\n        ctx.rotate(angle);\r\n\r\n        let h = 1;\r\n\r\n        if (long) h *= 1.25;\r\n        if (longer) h *= 1.5;\r\n\r\n        ctx.beginPath();\r\n        ctx.lineTo(size * 1.5 * h, 0);\r\n        ctx.lineTo(size * 0.4 * h, size * 0.75);\r\n        if (triangle) {}\r\n        else if (sharp) {\r\n            ctx.lineTo(-size * 0.4 * h, 0);\r\n        } else {\r\n            ctx.lineTo(-size * 0.75 * h, size * 0.75);\r\n            ctx.lineTo(-size * 2.25 * h, size * 1.5 * 0.75);\r\n            if (!hammer) ctx.lineTo(-size * 2 * h, 0);\r\n            ctx.lineTo(-size * 2.25 * h, -size * 1.5 * 0.75);\r\n            ctx.lineTo(-size * 0.75 * h, -size * 0.75);\r\n        }\r\n        ctx.lineTo(size * 0.4 * h, -size * 0.75);\r\n        ctx.closePath();\r\n        ctx.fillStyle = white ? '#ddd' : '#333';\r\n        ctx.fill();\r\n\r\n        ctx.resetTransform();\r\n    }\r\n}", "import Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Planet from './Planet';\r\n\r\nexport default class Explosion implements Component {\r\n    public entity: Entity = null!;\r\n    public timer = 0;\r\n\r\n    public constructor(\r\n        public readonly planet: Planet,\r\n        public x: number,\r\n        public y: number,\r\n        public size: number,\r\n        public explosionTime = 0.5\r\n    ) {}\r\n\r\n    public init(entity: Entity): void {\r\n        entity.zOrder = Order.Explosion;\r\n        this.entity = entity;\r\n        Game.instance!.explosions.push(this);\r\n    }\r\n\r\n    public update(dt: number) {\r\n        this.timer += dt * this.planet.getTimeMultiplier();\r\n\r\n        if (this.timer > this.explosionTime) {\r\n            this.entity.destroy();\r\n            let explosions = Game.instance!.explosions;\r\n            explosions.splice(explosions.indexOf(this), 1);\r\n        }\r\n    }\r\n\r\n    public alpha() {\r\n        return Math.max(0, (1 - this.timer / this.explosionTime) / Math.max(1, Math.log(1 + this.size * 10 / Planet.SIZE / Game.instance!.planet.scale)));\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Game from '../../Game';\r\nimport Explosion from '../Explosion';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport default class ExplosionUI implements UI {\r\n    private explosion: Explosion = null!;\r\n\r\n    public init(entity: Entity<{ base: Explosion }>): void {\r\n        this.explosion = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        let scale = Game.instance!.planet.scale;\r\n        ctx.beginPath();\r\n        ctx.arc(ui.x + this.explosion.x * ui.winScale, ui.y + this.explosion.y * ui.winScale, this.explosion.size / scale * ui.winScale, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#fff';\r\n        ctx.globalAlpha = this.explosion.alpha();\r\n        ctx.fill();\r\n        ctx.globalAlpha = 1;\r\n    }\r\n}", "import Collider from '../Collider';\r\nimport ExplosionUI from '../components/ui/Explosion';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Explosion from './Explosion';\r\n\r\nexport default class PlanetHit implements Component {\r\n    public entity: Entity = null!;\r\n    public collider = new Collider();\r\n\r\n    public constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public size: number\r\n    ) {}\r\n\r\n    public init(entity: Entity): void {\r\n        this.entity = entity;\r\n        entity.zOrder = Order.PlanetHit;\r\n        Game.instance!.hits.push(this);\r\n\r\n        const planet = Game.instance!.planet\r\n        entity.app.spawn({ base: new Explosion(planet, this.x, this.y, this.size), ui: new ExplosionUI() })\r\n        this.updateCollider();\r\n        planet.tryDestroy(this.collider);\r\n    }\r\n\r\n    public updateCollider() {\r\n        this.collider.update({ x: this.x, y: this.y, radius: this.size / Game.instance!.planet.scale });\r\n    }\r\n}", "import Application from '../../Application';\r\nimport Collider from '../Collider';\r\nimport PlanetHitUI from '../components/ui/PlanetHit';\r\nimport RocketUI, { RocketFlags } from '../components/ui/Rocket';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Explosion from './Explosion';\r\nimport Planet from './Planet';\r\nimport PlanetHit from './PlanetHit';\r\nimport ExplosionUI from './ui/Explosion';\r\n\r\nconst TAU = Math.PI * 2;\r\n\r\nfunction shortAngleDist(a0: number,a1: number) {\r\n    var da = (a1 - a0) % TAU;\r\n    return 2*da % TAU - da;\r\n}\r\n\r\nfunction angleLerp(a0: number,a1: number,t: number) {\r\n    return a0 + shortAngleDist(a0,a1)*t;\r\n}\r\n\r\nfunction distance(x: number, y: number) {\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n\r\nexport default class Rocket implements Component {\r\n    public entity: Entity = null!;\r\n    public app: Application = null!;\r\n    public collider = new Collider();\r\n    public angle: number;\r\n    public penetration = 1;\r\n    public trailTimer = 0;\r\n    public trailSpawnAtTime = 0;\r\n    public flags = 0;\r\n\r\n    public constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public size: number,\r\n        public damage: number,\r\n        public speed: number,\r\n        public gravity: number\r\n    ) {\r\n        const game = Game.instance!;\r\n        this.angle = Math.atan2(this.y, this.x) - Math.PI + Math.random() * TAU / game.planet.scale / game.epoch.multipliers.reset;\r\n        game.rockets.push(this);\r\n    }\r\n\r\n    public init(entity: Entity): void {\r\n        this.entity = entity;\r\n        this.app = entity.app;\r\n        entity.zOrder = Order.Rocket;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const game = Game.instance!,\r\n            planet = game.planet,\r\n            time = planet.getTimeMultiplier()\r\n\r\n        this.angle = angleLerp(this.angle, Math.atan2(this.y, this.x) - Math.PI, Math.min(1, dt * this.speed * time));\r\n\r\n        let speed = dt * 500 * this.speed / planet.scale * time,\r\n            dist = distance(this.x, this.y);\r\n\r\n        if (dist < speed) {\r\n            // this scope fixes 1e+308 speed\r\n            this.x = 0;\r\n            this.y = 0;\r\n            speed = Planet.SIZE * planet.scale;\r\n        } else {\r\n            this.x += Math.cos(this.angle) * speed;\r\n            this.y += Math.sin(this.angle) * speed;\r\n        }\r\n\r\n        this.updateCollider();\r\n\r\n        if (planet.intersects(this.collider))\r\n            this.collideWithPlanet(game, planet, speed);\r\n\r\n        this.trailTimer += dt * time;\r\n\r\n        if (this.trailTimer > this.trailSpawnAtTime) {\r\n            let cos = Math.cos(this.angle),\r\n                sin = Math.sin(this.angle),\r\n                width = this.size * 2;\r\n            this.app.spawn({ base: new Explosion(planet, this.x - cos * width, this.y - sin * width, this.size * (6 + Math.random()) / 10 * planet.scale, 0.33), ui: new ExplosionUI() });\r\n            this.trailSpawnAtTime = Math.random() / 30;\r\n            this.trailTimer = 0;\r\n        }\r\n    }\r\n\r\n    private collideWithPlanet(game: Game, planet: Planet, speed: number) {\r\n        let limit = 1_000,\r\n            multipliers = game.epoch.multipliers,\r\n            cos = Math.cos(this.angle),\r\n            sin = Math.sin(this.angle);\r\n\r\n        // get normal position\r\n\r\n        do {\r\n            this.x -= cos * speed / 2 / planet.scale;\r\n            this.y -= sin * speed / 2 / planet.scale;\r\n            this.updateCollider();\r\n        } while (planet.intersects(this.collider) && limit-- > 0);\r\n\r\n        while (!planet.intersects(this.collider) && limit-- > 0) {\r\n            this.x += cos * this.damage / 10 / planet.scale;\r\n            this.y += sin * this.damage / 10 / planet.scale;\r\n            this.updateCollider();\r\n        }\r\n\r\n        // wtf happened\r\n        if (this.x > 1e9 || this.y > 1e9) {\r\n            this.x = 0;\r\n            this.y = 0;\r\n        }\r\n\r\n        // explosion\r\n\r\n        let dist = Math.sqrt(this.x * this.x + this.y * this.y) + 1, // + 1 is NaN Fix\r\n            gravityPower = 1 + (Math.pow(2, this.gravity) - 1) / dist\r\n\r\n        game.score += this.damage * gravityPower / 10 * multipliers.score;\r\n        this.app.spawn({\r\n            base: new PlanetHit(this.x, this.y, this.damage * gravityPower * multipliers.power),\r\n            ui: new PlanetHitUI()\r\n        });\r\n\r\n        if (game.epoch.penetrationChance > Math.random()) this.penetration += 1;\r\n\r\n        if (--this.penetration <= 0) {\r\n            this.entity.destroy();\r\n            game.rockets.splice(game.rockets.indexOf(this), 1);\r\n        }\r\n    }\r\n\r\n    private updateCollider() {\r\n        let scale = Game.instance!.planet.scale;\r\n        this.collider.update({ x: this.x, y: this.y, radius: this.size / scale });\r\n    }\r\n\r\n    /** Spawn rocket's clone on orbit */\r\n    public spawnCloneOnOrbit(useTarget: boolean) {\r\n        const rocket = Rocket.spawnOnOrbit(this.damage, this.speed, this.gravity, useTarget);\r\n\r\n        rocket.size = this.size;\r\n        rocket.penetration = this.penetration;\r\n        rocket.flags = this.flags;\r\n\r\n        return rocket;\r\n    }\r\n\r\n    /** Spawn many rocket's clones */\r\n    public spawnClones(amount: number, useTarget: boolean) {\r\n        for (let i = amount + 1; --i;) {\r\n            this.spawnCloneOnOrbit(useTarget);\r\n        }\r\n    }\r\n\r\n    /** Spawn rocket on orbit and return */\r\n    public static spawnOnOrbit(damage: number, speed: number, gravity: number, useTarget: boolean) {\r\n        const game = Game.instance!,\r\n            angle = game.target.hidden || !useTarget\r\n                ? Math.random() * TAU\r\n                : game.target.angle + Math.random() * TAU / 12 - TAU / 12 / 2;\r\n\r\n        const rocket = new Rocket(\r\n            Math.cos(angle) * 1200,\r\n            Math.sin(angle) * 1200,\r\n            8, damage, speed, gravity\r\n        );\r\n\r\n        game.app.spawn({ base: rocket, ui: new RocketUI() });\r\n\r\n        return rocket;\r\n    }\r\n}", "import Application from '../../Application';\r\nimport Achievement from '../Achievement';\r\nimport Collider from '../Collider';\r\nimport DecorationUI from '../components/ui/Decoration';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport Component from './Component';\r\nimport Decoration, { DecorationType } from './Decoration';\r\nimport Rocket from './Rocket';\r\n\r\nconst planetPalette = [\r\n    { bg: '996', layers: ['ff9', 'fd9', 'fe9', 'ff9', 'ef9', 'df9'] },\r\n    { bg: '779', layers: ['99f', '9af', '9cf', 'a9f', 'c9f'] },\r\n    { bg: 'a66', layers: ['fa9', 'f2a291', 'fb9', 'e89', 'f9a', 'fa9', 'fc9'] },\r\n    { bg: '5a7', layers: ['8f9', '80f690', '7e8', '6d7', '7e7'] }\r\n];\r\n\r\ninterface PlanetLayer {\r\n    radius: number,\r\n    color: string\r\n}\r\n\r\nexport default class Planet implements Component {\r\n    public static readonly SIZE = 250;\r\n    public static readonly SIZE_SQUARE = Planet.SIZE * Planet.SIZE;\r\n    public static readonly DEATH_TIME = 0.75;\r\n    public app: Application = null!;\r\n    public scale = 1;\r\n    public destroyed = false;\r\n    public deathTime = 0;\r\n    public layers: PlanetLayer[] = [];\r\n    public rocketTime = 1; // instant spawn\r\n    public rocketInterval = 1;\r\n    public rocketPower = 100;\r\n    public rocketSpeed = 1;\r\n    public rocketGravity = 0;\r\n    public shootRockets = false;\r\n\r\n    private collider = new Collider();\r\n    private centerCollider = new Collider();\r\n\r\n    public init(entity: Entity): void {\r\n        entity.zOrder = Order.Planet;\r\n        this.app = entity.app;\r\n\r\n        this.updateColliders();\r\n        this.updatePalette();\r\n        this.spawnDecorations();\r\n    }\r\n\r\n    public update(dt: number) {\r\n        const game = Game.instance!;\r\n        let time = this.getTimeMultiplier();\r\n\r\n        this.rotate(dt / 10 * time);\r\n\r\n        if (this.shootRockets) {\r\n            this.rocketTime += dt * time;\r\n\r\n            let rocketInterval = this.getRocketInterval();\r\n\r\n            if (this.rocketTime > rocketInterval) {\r\n                Rocket.spawnOnOrbit(this.rocketPower, this.rocketSpeed * game.epoch.multipliers.speed, this.rocketGravity, true);\r\n                this.rocketTime = 0;\r\n            }\r\n        }\r\n\r\n        if (!this.destroyed) return;\r\n\r\n        let timeSpeed = game.getTimeSpeed();\r\n\r\n        this.deathTime += dt * timeSpeed;\r\n\r\n        this.app.shakePower = 10 * time / timeSpeed;\r\n\r\n        if (this.deathTime > Planet.DEATH_TIME * game.epoch.multipliers.reset)\r\n            this.respawn();\r\n    }\r\n\r\n    public respawn(fullRespawn = true, giveScore = true) {\r\n        let game = Game.instance!;\r\n        this.scale *= Math.pow(1.125, 2 / Math.sqrt(this.scale));\r\n        if (giveScore) game.score += Math.pow(50 * game.level, 1.1) * game.epoch.multipliers.score;\r\n        game.level += Math.round(game.epoch.multipliers.level);\r\n\r\n        if (!fullRespawn) return;\r\n\r\n        game.clearAll();\r\n        this.updateColliders();\r\n        this.destroyed = false;\r\n        this.deathTime = 0;\r\n        this.app.shakePower = 0;\r\n        this.updatePalette();\r\n        this.spawnDecorations();\r\n        this.rocketTime = this.rocketInterval;\r\n\r\n        // lets check it only when planet is destroyed\r\n        if (giveScore && game.score > 1_000_000) Achievement.unlock('One Million');\r\n\r\n        switch (game.level) {\r\n            // achievements\r\n            case 10: Achievement.unlock('Level 10'); break;\r\n            case 1000: Achievement.unlock('Level 1000'); break;\r\n            case 10000: Achievement.unlock('The End'); break;\r\n            // achievements with rockets\r\n            case 3: Achievement.unlock('Rocket 2'); break;\r\n            case 7: Achievement.unlock('Rocket 3'); break;\r\n            case 15: Achievement.unlock('Rocket 4'); break;\r\n            case 25: Achievement.unlock('Rocket 5'); break;\r\n            case 40: Achievement.unlock('Rocket 6'); break;\r\n            case 60: Achievement.unlock('Rocket 7'); break;\r\n            case 80: Achievement.unlock('Rocket 8'); break;\r\n        }\r\n    }\r\n\r\n    public updatePalette() {\r\n        const palette = planetPalette[Math.floor(Math.random() * planetPalette.length)];\r\n        this.makeLayers(palette.layers);\r\n        this.app.backgroundColor = '#' + palette.bg as `#${string}`;\r\n    }\r\n\r\n    public spawnDecorations() {\r\n        if (this.scale > 50) return;\r\n\r\n        const amount = Math.min(80, Math.round(30 * this.scale));\r\n\r\n        for (let i = 0; i < amount; ++i) {\r\n            let angle = Math.PI * 2 * i / amount + (Math.random() * 30 - 15) * Math.PI / 180;\r\n\r\n            this.app.spawn({ base: new Decoration(\r\n                Math.cos(angle) * Planet.SIZE,\r\n                Math.sin(angle) * Planet.SIZE,\r\n                10 * Math.sqrt(this.scale) + Math.random() * 40,\r\n                angle,\r\n                Math.random() > 0.36 ? DecorationType.Hill : DecorationType.Tree\r\n            ), ui: new DecorationUI() });\r\n        }\r\n    }\r\n\r\n    public makeLayers(layersPalette: string[]) {\r\n        this.layers.splice(0, this.layers.length);\r\n\r\n        let height = Planet.SIZE * this.scale,\r\n            middleRadius = this.centerAreaRadius(),\r\n            i = 0;\r\n\r\n        while (height > middleRadius) {\r\n            this.layers.push({ radius: height / this.scale, color: '#' + layersPalette[i % layersPalette.length] });\r\n            if (i == 0) height -= 15 * this.scale;\r\n            else height -= 5 * this.scale + 50 * i + 40 * i * Math.random() + 5 * this.scale * Math.random();\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    public updateColliders() {\r\n        this.collider.update({ x: 0, y: 0, radius: Planet.SIZE });\r\n        this.centerCollider.update({ x: 0, y: 0, radius: this.centerAreaRadius() });\r\n    }\r\n\r\n    public intersects(collider: Collider): boolean {\r\n        if (!this.collider.intersects(collider, true)) return false;\r\n\r\n        for (let hit of Game.instance!.hits) {\r\n            if (hit.collider.intersects(collider, true))\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public tryDestroy(collider: Collider) {\r\n        if (this.centerCollider.intersects(collider, false)) {\r\n            this.destroyed = true;\r\n        }\r\n    }\r\n\r\n    public centerAreaRadius(): number {\r\n        return Planet.SIZE * Math.max(0.05, 0.25 - this.scale / 10 * 0.20);\r\n    }\r\n\r\n    public getTimeMultiplier(): number {\r\n        const game = Game.instance!,\r\n            time = game.getTimeSpeed();\r\n\r\n        if (this.deathTime == 0) return time;\r\n\r\n        const reset = game.epoch.multipliers.reset;\r\n\r\n        return Math.max(0, Planet.DEATH_TIME - this.deathTime / reset) / 1.5 / Planet.DEATH_TIME * time;\r\n    }\r\n\r\n    public rotate(radians: number) {\r\n        let sin = Math.sin(radians);\r\n\r\n        // (normal speed)\r\n        // cos = 0.9999...\r\n        // sin = 0.0007...\r\n        // distanceIn = 250.0\r\n        // distanceOut = 249.9\r\n        //\r\n        // so, cos = 1\r\n\r\n        for (let hit of Game.instance!.hits) {\r\n            hit.x = hit.x - hit.y * sin;\r\n            hit.y = hit.x * sin + hit.y;\r\n            hit.updateCollider();\r\n        }\r\n\r\n        for (let explosion of Game.instance!.explosions) {\r\n            explosion.x = explosion.x - explosion.y * sin;\r\n            explosion.y = explosion.x * sin + explosion.y;\r\n        }\r\n\r\n        for (let deco of Game.instance!.decorations) {\r\n            deco.x = deco.x - deco.y * sin;\r\n            deco.y = deco.x * sin + deco.y;\r\n            deco.angle += radians;\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.rocketPower = 100;\r\n        this.rocketSpeed = 1;\r\n        this.rocketGravity = 0;\r\n        this.scale = 1;\r\n        this.destroyed = false;\r\n        this.deathTime = 0;\r\n        this.rocketTime = 1;\r\n        this.rocketInterval = 1;\r\n        this.app.shakePower = 0;\r\n        this.updateColliders();\r\n        this.updatePalette();\r\n        this.spawnDecorations();\r\n    }\r\n\r\n    public getRocketInterval(): number {\r\n        return this.rocketInterval * Game.instance!.epoch.multipliers.interval;\r\n    }\r\n\r\n    public postLoad(level: number) {\r\n        for (let i = 0; i < level - 1; ++i){\r\n            this.respawn(false, false);\r\n        }\r\n        this.respawn(true, false);\r\n    }\r\n}", "import Planet from '../../components/Planet';\r\nimport Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class PlanetResetUpgrade extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Faster Reset', 'x0.8', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.reset *= 0.8;\r\n        game.epoch.multipliers.speed *= 1.1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Decrease planet\\'s reset by 20% each upgrade. Current reset time is ' + (Planet.DEATH_TIME * Game.instance!.epoch.multipliers.reset * 1000).toFixed(0) + 'ms. Also buffs rockets speed by x1.1';\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class PowerMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Power', '+1', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.power += 1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Increase the power multiplier by 1. Current power multiplier is ' + Game.instance!.epoch.multipliers.power;\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class ScoreMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Score', '+1', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.score += 1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Increase score (income) multiplier by 1. Current score multiplier is ' + Game.instance!.epoch.multipliers.score;\r\n    }\r\n}", "import Game from '../../Game';\r\nimport EpochUpgrade from './EpochUpgrade';\r\n\r\nexport default class TimeMultiplier extends EpochUpgrade {\r\n    public constructor() {\r\n        super('Time', '+0.1', 1);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.epoch.multipliers.time += 0.1;\r\n        this.cost *= 2;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return 'Speed up the time. Current time multiplier is ' + Game.instance!.epoch.multipliers.time.toFixed(1)\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class EpochBtn extends Button {\r\n    public constructor() {\r\n        super('UPGRADES', {\r\n            offsetX: -170,\r\n            offsetY: 40,\r\n            screenX: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        Game.instance!.overlay.scene = Scene.Epoch;\r\n    }\r\n}", "import Button from '../Button';\r\nimport Game from '../Game';\r\n\r\nexport default class NewEpochBtn extends Button {\r\n    public constructor() {\r\n        super('NEW EPOCH', {\r\n            offsetY: 108,\r\n            screenX: 0.5,\r\n            screenY: 0,\r\n            width: 300,\r\n            height: 24,\r\n            fontSize: 20,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 12\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        Game.instance!.epoch.endEpoch();\r\n    }\r\n}", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\nexport default class PlayBtn extends Button {\r\n    public constructor() {\r\n        super('PLAY', {\r\n            offsetY: 100,\r\n            screenX: 0.5,\r\n            screenY: 0.5,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'hsl(199, 64%, 71%)',\r\n            overStrokeColor: 'hsl(200, 100%, 86%)',\r\n            pressStrokeColor: 'hsl(199, 53%, 76%)',\r\n            rounding: 20\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n        game.planet.shootRockets = true;\r\n        game.overlay.scene = Scene.Game;\r\n        game.target.canClick = true;\r\n    }\r\n}", "import Button from '../../Button';\r\nimport Rocket from '../../components/Rocket';\r\nimport RocketUI from '../../components/ui/Rocket';\r\nimport { UIContext } from '../../components/ui/UI';\r\nimport Game from '../../Game';\r\n\r\ntype RocketDummy = {\r\n    offset: number,\r\n    dummySize: number\r\n}\r\n\r\ntype RocketConfig = {\r\n    size: number,\r\n    speed?: number,\r\n    damage: number,\r\n    gravity?: number,\r\n    onSpawn?: (r: Rocket) => void,\r\n    flags: number\r\n}\r\n\r\n// not so button\r\nexport default class RocketBtn extends Button {\r\n    private rotation = 0;\r\n    private reload = 0;\r\n\r\n    public constructor(\r\n        private readonly config: RocketDummy & RocketConfig,\r\n        public reloadTime = 1,\r\n        public unlocked = false\r\n    ) {\r\n        super('', {\r\n            screenX: 0.5,\r\n            screenY: 1,\r\n            width: 80,\r\n            height: 80\r\n        });\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        //super.render is implemented here\r\n        if (this.hidden) return;\r\n\r\n        let measure = this.measure(ui),\r\n            cos = Math.cos(this.rotation),\r\n            sin = Math.sin(this.rotation);\r\n\r\n        super.update(ui.width, ui.height, ui.winScale, measure.width / 2);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(measure.x + measure.w / 2, measure.y + measure.h / 2, measure.w / 2, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(255,255,255,0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(measure.x + measure.w / 2, measure.y + measure.h / 2);\r\n        ctx.arc(measure.x + measure.w / 2, measure.y + measure.h / 2, measure.w / 2, 0, 2 * Math.PI * this.reload / this.reloadTime);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fill();\r\n\r\n        if (!this.unlocked) {\r\n            ctx.font = 52 * ui.winScale + 'px Ubuntu';\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillStyle = '#333';\r\n            ctx.fillText('?', measure.x + measure.w / 2, measure.y + measure.h / 2);\r\n            return;\r\n        }\r\n\r\n        const scale = 1.5;\r\n\r\n        RocketUI.renderDummy(\r\n            ctx,\r\n            this.config.dummySize * ui.winScale * scale,\r\n            measure.x + measure.w / 2 + this.config.offset * ui.winScale * cos * scale,\r\n            measure.y + measure.h / 2 + this.config.offset * ui.winScale * sin * scale,\r\n            this.rotation,\r\n            this.config.flags\r\n        );\r\n\r\n        this.rotation += ui.dt;\r\n        this.reload = Math.min(this.reloadTime, this.reload + ui.dt);\r\n    }\r\n\r\n    public onClick(): void {\r\n        if (this.reload != this.reloadTime) return;\r\n\r\n        const game = Game.instance!,\r\n            planet = game.planet,\r\n            rocket = Rocket.spawnOnOrbit(\r\n                planet.rocketPower * this.config.damage,\r\n                planet.rocketSpeed * (this.config.speed || 1) * game.epoch.multipliers.speed,\r\n                planet.rocketGravity * (this.config.gravity || 1),\r\n                true\r\n            );\r\n\r\n        rocket.size = this.config.size;\r\n        rocket.flags = this.config.flags;\r\n\r\n        this.config.onSpawn?.(rocket);\r\n\r\n        this.reload = 0;\r\n    }\r\n}", "import { RocketFlags } from '../../components/ui/Rocket';\r\nimport RocketBtn from './RocketBtn';\r\n\r\nexport default [\r\n    // First layer\r\n    [\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 10,\r\n            size: 12.5, damage: 1.25,\r\n            flags: RocketFlags.None\r\n        }, 1, true),\r\n\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 9,\r\n            size: 12.5, speed: 2, damage: 0.6, gravity: 0.5,\r\n            onSpawn: r => r.penetration = 4,\r\n            flags: RocketFlags.Long\r\n        }, 4),\r\n\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 11.5,\r\n            size: 20, speed: 0.6, damage: 3,\r\n            flags: RocketFlags.Hammer\r\n        }, 8),\r\n\r\n        new RocketBtn({\r\n            offset: -3, dummySize: 8,\r\n            size: 8, speed: 1.5, damage: 0.5,\r\n            flags: RocketFlags.Sharp\r\n        }, 0.125),\r\n\r\n        new RocketBtn({\r\n            offset: 6, dummySize: 13,\r\n            size: 60, speed: 0.2, damage: 90, gravity: 0.1,\r\n            flags: RocketFlags.White\r\n        }, 90)\r\n    ],\r\n    // Second layer (elites)\r\n    [\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 8,\r\n            size: 15, speed: 3, damage: 0.4, gravity: 0,\r\n            onSpawn: r => r.penetration = 8,\r\n            flags: RocketFlags.Longer\r\n        }, 12),\r\n\r\n        new RocketBtn({\r\n            offset: -4, dummySize: 7,\r\n            size: 7, speed: 2, damage: 0.5,\r\n            onSpawn: r => r.spawnClones(24, false),\r\n            flags: RocketFlags.Triangle\r\n        }, 5),\r\n\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 7,\r\n            size: 10, speed: 4, damage: 0.3, gravity: 0,\r\n            onSpawn: r => r.penetration = 16,\r\n            flags: RocketFlags.Long | RocketFlags.Longer\r\n        }, 15)\r\n    ],\r\n    /* Third layer (removed elites)\r\n    [\r\n        new RocketBtn({\r\n            offset: 5, dummySize: 7,\r\n            size: 10, speed: 4, damage: 0.3, gravity: 0,\r\n            onSpawn: r => { r.penetration = 16; r.spawnClones(2, true); },\r\n            flags: RocketFlags.Long | RocketFlags.Longer | RocketFlags.White\r\n        }, 1)\r\n    ]\r\n    */\r\n];", "import Button from '../Button';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\n\r\n// almost same as PlayBtn\r\nexport default class NewEpochBtn extends Button {\r\n    public constructor() {\r\n        super('START', {\r\n            offsetY: -60,\r\n            screenX: 0.5,\r\n            screenY: 1,\r\n            width: 300,\r\n            height: 40,\r\n            fontSize: 26,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'rgb(218, 255, 55)',\r\n            overStrokeColor: 'rgb(191, 221, 61)',\r\n            pressStrokeColor: 'rgb(228, 255, 106)',\r\n            rounding: 12\r\n        });\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n        game.planet.shootRockets = true;\r\n        game.overlay.scene = Scene.Game;\r\n        game.target.canClick = true;\r\n    }\r\n}", "import Button from '../../Button';\r\nimport { UIContext } from '../../components/ui/UI';\r\nimport Game from '../../Game';\r\nimport { ISave, Save } from '../../saves';\r\n\r\nexport default abstract class Upgrade extends Button implements ISave {\r\n    private readonly initialCost: number;\r\n    protected cachedDescription: string[] = [];\r\n    public level = 0;\r\n\r\n    public constructor(public readonly name: string, public cost: number, public readonly maxLevel: number) {\r\n        super('BUY', {\r\n            screenY: 1,\r\n            width: 120,\r\n            height: 42,\r\n            fontSize: 28,\r\n            fontColor: '#fff',\r\n            strokeWidth: 4,\r\n            strokeColor: 'hsl(199, 64%, 71%)',\r\n            overStrokeColor: 'hsl(200, 100%, 86%)',\r\n            pressStrokeColor: 'hsl(199, 53%, 76%)',\r\n            rounding: 20\r\n        });\r\n        this.initialCost = cost;\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        if (this.cachedDescription.length == 0)\r\n            this.cachedDescription = this.getDescription();\r\n\r\n        let measure = this.measure(ui),\r\n            width = 180 * ui.winScale,\r\n            description = this.getDescription(),\r\n            descLength = 20 * description.length * ui.winScale,\r\n            textOffset = 60 * ui.winScale,\r\n            height = 90 * ui.winScale;\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(\r\n            measure.x - width / 2,\r\n            measure.y - height - descLength,\r\n            measure.w + width,\r\n            measure.h + height + descLength * 2,\r\n            [16, 16, 0, 0]\r\n        );\r\n        ctx.closePath();\r\n        ctx.fillStyle = this.cost < Game.instance!.score ? 'rgba(0,0,0,0.4)' : 'rgba(0,0,0,0.6)';\r\n        ctx.fill();\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n\r\n        ctx.fillStyle = '#eee';\r\n        ctx.fillText(this.name + ' [' + this.level + ']', measure.x + textOffset, measure.y - descLength - 60 * ui.winScale);\r\n\r\n        ctx.font = 18 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.fillText(this.level == this.maxLevel ? 'MAX' : 'Cost: ' + Game.format(this.cost), measure.x + textOffset, measure.y - descLength - 28 * ui.winScale);\r\n\r\n        ctx.fillStyle = '#ddd';\r\n        ctx.font = 12 * ui.winScale + 'px Ubuntu';\r\n        for (let i = description.length - 1; i >= 0; --i) {\r\n            ctx.fillText(description[i], measure.x + textOffset, measure.y - 25 * ui.winScale - 20 * i * ui.winScale);\r\n        }\r\n\r\n        super.render(ctx, ui);\r\n    }\r\n\r\n    public onClick(): void {\r\n        const game = Game.instance!;\r\n\r\n        if (game.score < this.cost || this.level >= this.maxLevel) return;\r\n        game.score -= this.cost;\r\n        this.onPurchase(game);\r\n        this.level += 1;\r\n        this.cachedDescription = this.getDescription();\r\n        if (this.level == this.maxLevel) this.text = 'MAX';\r\n    }\r\n\r\n    public reset() {\r\n        this.level = 1;\r\n        this.cost = this.initialCost;\r\n        this.cachedDescription = this.getDescription();\r\n        this.text = 'BUY';\r\n    }\r\n\r\n    public abstract onPurchase(game: Game): void;\r\n    public abstract getDescription(): string[];\r\n\r\n    public purchaseMany(game: Game, count: number) {\r\n        for (let i = 0; i < count; ++i)\r\n            this.onPurchase(game);\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(this.level);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        this.level = save.readU8();\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class GravityUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Gravity', 100, 50);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.planet.rocketGravity += 0.2;\r\n        this.cost += this.cost / 3 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            '+0.2 rocket gravity per upgrade',\r\n            'to the planet. Grows geometrically!',\r\n            'Rockets will damage more if they are closer',\r\n            'Current rocket gravity: ' + Game.instance!.planet.rocketGravity.toFixed(1)\r\n        ];\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class LessIntervalUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Less Interval', 100, 60);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.planet.rocketInterval *= 0.95;\r\n        this.cost += this.cost / 3.5 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            'Decreases the rocket interval by x0.95',\r\n            'Current rocket interval: ' + (Game.instance!.planet.rocketInterval * 1000).toFixed(1) + 'ms',\r\n        ];\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class PowerUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Power', 100, 100);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        game.planet.rocketPower *= 1.1;\r\n        this.cost += this.cost / 6 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            'x1.1 rocket power',\r\n            'Current rocket power: ' + Game.format(Game.instance!.planet.rocketPower)\r\n        ];\r\n    }\r\n}", "import Game from '../../Game';\r\nimport Upgrade from './Upgrade';\r\n\r\nexport default class SpeedUpgrade extends Upgrade {\r\n    public constructor() {\r\n        super('Speed', 100, 100);\r\n    }\r\n\r\n    public onPurchase(game: Game): void {\r\n        if (this.level % 10 == 9) this.cost += this.cost * game.epoch.multipliers.cost;\r\n        game.planet.rocketSpeed = Math.pow(game.planet.rocketSpeed * 1.45, 1.01);\r\n        this.cost += this.cost / 1.1 * game.epoch.multipliers.cost;\r\n    }\r\n\r\n    public getDescription(): string[] {\r\n        return [\r\n            'x1.45 rocket speed (^1.01)',\r\n            'Current rocket speed: ' + Game.format(Game.instance!.planet.rocketSpeed, 1)\r\n        ];\r\n    }\r\n}", "import Achievement from '../Achievement';\r\nimport ChallengeBtn from '../buttons/ChallengeBtn';\r\nimport ChallengesBtn from '../buttons/ChallengesBtn';\r\nimport EndChallengeBtn from '../buttons/EndChallengeBtn';\r\nimport CostMultiplier from '../buttons/epoch/CostMultiplier';\r\nimport EpochUpgrade from '../buttons/epoch/EpochUpgrade';\r\nimport PenetrationChance from '../buttons/epoch/PenetrationChance';\r\nimport PlanetResetUpgrade from '../buttons/epoch/PlanetResetUpgrade';\r\nimport PowerMultiplier from '../buttons/epoch/PowerMultiplier';\r\nimport ScoreMultiplier from '../buttons/epoch/ScoreMultiplier';\r\nimport TimeMultiplier from '../buttons/epoch/TimeMultiplier';\r\nimport EpochBtn from '../buttons/EpochBtn';\r\nimport NewEpochBtn from '../buttons/NewEpochBtn';\r\nimport PlayBtn from '../buttons/PlayBtn';\r\nimport RocketBtn from '../buttons/rockets/RocketBtn';\r\nimport rocketLayers from '../buttons/rockets/RocketLayers';\r\nimport StartEpochBtn from '../buttons/StartEpochBtn';\r\nimport GravityUpgrade from '../buttons/upgrade/GravityUpgrade';\r\nimport LessIntervalUpgrade from '../buttons/upgrade/LessIntervalUpgrade';\r\nimport PowerUpgrade from '../buttons/upgrade/PowerUpgrade';\r\nimport SpeedUpgrade from '../buttons/upgrade/SpeedUpgrade';\r\nimport Upgrade from '../buttons/upgrade/Upgrade';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport { Order } from '../Order';\r\nimport { ISave, Save } from '../saves';\r\nimport Component from './Component';\r\n\r\nexport const enum Scene {\r\n    Menu,\r\n    Game,\r\n    Epoch,\r\n    Challenges\r\n}\r\n\r\nexport default class Overlay implements Component, ISave {\r\n    public static readonly ACHIEVEMENT_TIME = 5;\r\n    private readonly achievementsStack: Achievement[] = [];\r\n    private achievementTimer = 0;\r\n    private nextAchievementAt = 0;\r\n    public entity: Entity = null!;\r\n    public logoImage: HTMLImageElement;\r\n    public scene = Scene.Menu;\r\n\r\n    public readonly upgrades: Upgrade[] = [\r\n        new PowerUpgrade(),\r\n        new LessIntervalUpgrade(),\r\n        new SpeedUpgrade(),\r\n        new GravityUpgrade()\r\n    ];\r\n\r\n    public readonly epochUpgrades: EpochUpgrade[] = [\r\n        new PowerMultiplier(),\r\n        new ScoreMultiplier(),\r\n        new CostMultiplier(),\r\n        new TimeMultiplier(),\r\n        new PenetrationChance(),\r\n        new PlanetResetUpgrade()\r\n    ];\r\n\r\n    public challengeButtons: ChallengeBtn[] = null!;\r\n\r\n    public readonly rocketButtons: RocketBtn[][] = rocketLayers;\r\n    public rocketButtonsEnabled = true;\r\n\r\n    public readonly play = new PlayBtn();\r\n    public readonly newEpoch = new NewEpochBtn();\r\n    public readonly startEpoch = new StartEpochBtn();\r\n    public readonly challenges = new ChallengesBtn();\r\n    public readonly epoch = new EpochBtn();\r\n    public readonly endChallenge = new EndChallengeBtn();\r\n\r\n    public constructor() {\r\n        this.logoImage = new Image();\r\n        this.logoImage.src = 'logo.png';\r\n    }\r\n\r\n    public init(entity: Entity) {\r\n        entity.zOrder = Order.Overlay;\r\n        this.challengeButtons = Game.instance!.epoch.challenges.map(challenge => new ChallengeBtn(challenge));\r\n        this.entity = entity;\r\n    }\r\n\r\n    public update(dt: number) {\r\n        if (!this.nextAchievementAt) return;\r\n\r\n        this.achievementTimer += dt;\r\n\r\n        if (this.achievementTimer > this.nextAchievementAt) {\r\n            this.achievementsStack.shift();\r\n            this.achievementTimer = 0;\r\n            if (!this.achievementsStack[0])\r\n                this.nextAchievementAt = 0;\r\n        }\r\n    }\r\n\r\n    public pushAchievement(achievement: Achievement) {\r\n        this.achievementsStack.push(achievement);\r\n        this.nextAchievementAt = Overlay.ACHIEVEMENT_TIME;\r\n        this.achievementTimer = 0;\r\n    }\r\n\r\n    public getAchievement(): Achievement | undefined {\r\n        return this.achievementsStack[0];\r\n    }\r\n\r\n    /** https://www.desmos.com/Calculator/9th1u5gtpl */\r\n    public achievementAlpha() {\r\n        if (!this.nextAchievementAt) return 0;\r\n\r\n        return Math.min(1, this.achievementTimer / 0.1 / this.nextAchievementAt)\r\n            - Math.max(0, (this.achievementTimer - this.nextAchievementAt * 0.9) / 0.1 / this.nextAchievementAt);\r\n    }\r\n\r\n    public resetUpgrades() {\r\n        for (let upgrade of this.upgrades) {\r\n            upgrade.reset();\r\n        }\r\n    }\r\n\r\n    public unlockRocket(layer: number, index: number) {\r\n        let rocketLayer = this.rocketButtons[layer];\r\n        if (!rocketLayer) return;\r\n\r\n        let rocket = rocketLayer[index];\r\n        if (!rocket) return;\r\n\r\n        rocket.unlocked = true;\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeArray(this.upgrades);\r\n        save.writeArray(this.epochUpgrades);\r\n        // dont save rocketLayers\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        save.loadArray(this.upgrades);\r\n        save.loadArray(this.epochUpgrades);\r\n    }\r\n\r\n    public postLoad() {\r\n        for (let upgrade of this.upgrades) {\r\n            upgrade.purchaseMany(Game.instance!, upgrade.level);\r\n        }\r\n        for (let upgrade of this.epochUpgrades) {\r\n            upgrade.purchaseMany(Game.instance!, upgrade.level);\r\n        }\r\n    }\r\n}", "import Application from '../../Application';\r\nimport { Scene } from '../components/Overlay';\r\nimport Game from '../Game';\r\nimport { ISave, Save } from '../saves';\r\n\r\nexport default abstract class Challenge implements ISave {\r\n    private startTime: number | null = null;\r\n    public completedTime: number | null = null;\r\n    public completed = false;\r\n\r\n    public constructor(\r\n        public readonly name: string,\r\n        public readonly description: string,\r\n        public readonly reward: string\r\n    ) {}\r\n\r\n    public abstract onStart(game: Game): void;\r\n    public abstract onReward(game: Game): void;\r\n    public abstract onEnd(game: Game): void;\r\n\r\n    public start() {\r\n        const game = Game.instance!;\r\n\r\n        game.epoch.currentChallenge = this;\r\n\r\n        this.startTime = Application.now();\r\n\r\n        game.planet.shootRockets = true; // active challenge\r\n        game.target.canClick = true;\r\n        this.onStart(game);\r\n        game.overlay.scene = Scene.Game;\r\n    }\r\n\r\n    public end(completed: boolean) {\r\n        if (!this.startTime) return;\r\n\r\n        const game = Game.instance!;\r\n\r\n        this.onEnd(game);\r\n\r\n        game.epoch.currentChallenge = null;\r\n\r\n        if (!completed) {\r\n            this.startTime = null;\r\n            return;\r\n        }\r\n\r\n        this.completedTime = Application.now() - this.startTime;\r\n        if (!this.completed) this.onReward(game);\r\n        this.completed = true;\r\n    }\r\n\r\n    public isInChallenge(): boolean {\r\n        return this.startTime != null;\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8((this.name.length + this.description.length + this.reward.length) % 0xff);\r\n        save.writeBoolean(this.completed);\r\n        if (this.completed) save.writeF64(this.completedTime!);\r\n        save.writeBoolean(this.isInChallenge());\r\n        if (this.isInChallenge()) save.writeF64(this.startTime!);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        const sum = (this.name.length + this.description.length + this.reward.length) % 0xff;\r\n        if (sum != save.readU8()) {\r\n            let a = save.readBoolean()\r\n            if (a) save.readF64()\r\n            let b = save.readBoolean()\r\n            if (b) save.readF64()\r\n            return;\r\n        }\r\n        this.completed = save.readBoolean();\r\n        if (this.completed) this.completedTime = save.readF64();\r\n        if (save.readBoolean()) {\r\n            // the challenge is active\r\n            this.startTime = save.readF64();\r\n            this.onStart(Game.instance!);\r\n        }\r\n    }\r\n}", "import Game from '../Game';\r\nimport Challenge from './Challenge';\r\n\r\nexport default class ActiveChallenge extends Challenge {\r\n    public constructor() {\r\n        super('Active', 'Auto rockets are disabled', '2x rocket reload');\r\n    }\r\n\r\n    public onStart(game: Game): void {\r\n        game.planet.shootRockets = false;\r\n    }\r\n\r\n    public onReward(game: Game): void {\r\n        game.epoch.multipliers.interval /= 2;\r\n    }\r\n\r\n    public onEnd(game: Game): void {\r\n        game.planet.shootRockets = true;\r\n    }\r\n}", "import Game from '../Game';\r\nimport Challenge from './Challenge';\r\n\r\nexport default class EpochChallenge extends Challenge {\r\n    public constructor() {\r\n        super('Epoch', 'Epoch gain x0.1 (starts from level 500) and rockets are 10x slower', '+2 level per level');\r\n    }\r\n\r\n    public onStart(game: Game): void {\r\n        game.epoch.multipliers.epoch *= 0.1;\r\n        game.epoch.multipliers.speed /= 10;\r\n    }\r\n\r\n    public onReward(game: Game): void {\r\n        game.epoch.multipliers.level += 1\r\n    }\r\n\r\n    public onEnd(game: Game): void {\r\n        game.epoch.multipliers.epoch /= 0.1;\r\n        game.epoch.multipliers.speed *= 10;\r\n    }\r\n}", "import Game from '../Game';\r\nimport Challenge from './Challenge';\r\n\r\nexport default class OfflineChallenge extends Challenge {\r\n    public constructor() {\r\n        super('Offline', 'Target and buttons are disabled', '2x button reload');\r\n    }\r\n\r\n    public onStart(game: Game): void {\r\n        game.target.canClick = false;\r\n        game.overlay.rocketButtonsEnabled = false;\r\n    }\r\n\r\n    public onReward(game: Game): void {\r\n        // typescript will compile this into for i loops\r\n        for (let layer of game.overlay.rocketButtons) {\r\n            for (let rocket of layer) {\r\n                rocket.reloadTime /= 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    public onEnd(game: Game): void {\r\n        game.target.canClick = true;\r\n        game.overlay.rocketButtonsEnabled = true;\r\n    }\r\n}", "import Achievement from './Achievement';\r\nimport ActiveChallenge from './challenges/ActiveChallenge';\r\nimport Challenge from './challenges/Challenge';\r\nimport EpochChallenge from './challenges/EpochChallenge';\r\nimport OfflineChallenge from './challenges/OfflineChallenge';\r\nimport { Scene } from './components/Overlay';\r\nimport Game from './Game';\r\nimport { ISave, Save } from './saves';\r\n\r\nexport default class Epoch implements ISave {\r\n    public static readonly EPOCH_LEVEL = 100;\r\n\r\n    public readonly challenges: Challenge[] = [\r\n        new OfflineChallenge(),\r\n        new ActiveChallenge(),\r\n        new EpochChallenge()\r\n    ];\r\n    public currentChallenge: Challenge | null = null;\r\n\r\n    public multipliers = {\r\n        power: 1, cost: 1, score: 1,\r\n        time: 1, reset: 1, speed: 1,\r\n        epoch: 1, level: 1, interval: 1\r\n    };\r\n    public penetrationChance = 0;\r\n\r\n    public points = 0;\r\n    public count = 0;\r\n\r\n    public endEpoch() {\r\n        const game = Game.instance!;\r\n\r\n        if (this.count == 0) Achievement.unlock('First Epoch');\r\n\r\n        this.count += 1;\r\n        this.points += this.calculatePoints(game.level);\r\n        game.reset();\r\n        game.overlay.scene = Scene.Epoch;\r\n        game.planet.shootRockets = false;\r\n        game.target.canClick = false;\r\n\r\n        if (this.points > 1_000_000) Achievement.unlock('Evolution');\r\n\r\n        this.currentChallenge?.end(true);\r\n    }\r\n\r\n    public calculatePoints(level: number): number {\r\n        return Math.round(Math.pow(level / Epoch.EPOCH_LEVEL, 2 + level / 1000) * this.multipliers.epoch);\r\n    }\r\n\r\n    public isInChallenge(): boolean {\r\n        return this.currentChallenge != null;\r\n    }\r\n\r\n    public calculateProgress(level: number): number {\r\n        return Math.min(1, level / Epoch.EPOCH_LEVEL * this.multipliers.epoch);\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU32(this.count);\r\n        save.writeF64(this.points);\r\n        save.writeArray(this.challenges);\r\n        // 0 if no current challenge\r\n        save.writeU8(this.currentChallenge ? this.challenges.indexOf(this.currentChallenge) + 1 : 0);\r\n        // dont save multipliers\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        this.count = save.readU32();\r\n        this.points = save.readF64();\r\n        save.loadArray(this.challenges);\r\n        let challengeIndex = save.readU8() - 1;\r\n        if (challengeIndex > -1)\r\n            this.currentChallenge = this.challenges[challengeIndex];\r\n    }\r\n}", "import { ISave } from './ISave';\r\n\r\nexport class Save {\r\n    public static readonly VERSION = 1;\r\n    public static readonly INITIAL_SIZE = 0xFFFF;\r\n    public static readonly LITTLE_ENDIAN = true;\r\n    private dataview: DataView;\r\n    private offset = 0;\r\n\r\n    public constructor(\r\n        private u8 = new Uint8Array(Save.INITIAL_SIZE),\r\n        private length = Save.INITIAL_SIZE\r\n    ) {\r\n        this.dataview = new DataView(this.u8.buffer);\r\n    }\r\n\r\n    public static fromU8(u8: Uint8Array) {\r\n        return new Save(u8, u8.length);\r\n    }\r\n\r\n    public static fromLocalStorage(): Save | undefined {\r\n        const storage = localStorage.getItem('save');\r\n\r\n        if (!storage) return undefined;\r\n\r\n        return Save.fromU8(\r\n            new Uint8Array(atob(storage)\r\n                .split('')\r\n                .map(char => char.charCodeAt(0))\r\n            )\r\n        );\r\n    }\r\n\r\n    public toLocalStorage() {\r\n        localStorage.setItem('save', btoa(\r\n            Array.from(this.u8.slice(0, this.offset))\r\n                .map(byte => String.fromCharCode(byte))\r\n                .join('')\r\n        ));\r\n    }\r\n\r\n    private grow() {\r\n        let newU8 = new Uint8Array(this.length += Save.INITIAL_SIZE);\r\n        newU8.set(this.u8, 0);\r\n        this.u8 = newU8;\r\n        this.dataview = new DataView(this.u8.buffer);\r\n    }\r\n\r\n    private shouldGrow(length: number) {\r\n        if (this.offset + length > this.length) {\r\n            this.grow();\r\n        }\r\n    }\r\n\r\n    public writeU8(value: number) {\r\n        this.shouldGrow(1);\r\n        this.u8[this.offset] = value;\r\n        this.offset += 1;\r\n    }\r\n\r\n    public writeU16(value: number) {\r\n        this.shouldGrow(2);\r\n        this.dataview.setUint16(this.offset, value, Save.LITTLE_ENDIAN);\r\n        this.offset += 2;\r\n    }\r\n\r\n    public writeU32(value: number) {\r\n        this.shouldGrow(4);\r\n        this.dataview.setUint32(this.offset, value, Save.LITTLE_ENDIAN);\r\n        this.offset += 4;\r\n    }\r\n\r\n    public writeF64(value: number) {\r\n        this.shouldGrow(8);\r\n        this.dataview.setFloat64(this.offset, value, Save.LITTLE_ENDIAN);\r\n        this.offset += 8;\r\n    }\r\n\r\n    public writeBoolean(value: boolean) {\r\n        this.writeU8(value ? 1 : 0);\r\n    }\r\n\r\n    public writeString(value: string) {\r\n        this.shouldGrow(value.length + 1);\r\n        for (let i = 0; i < value.length; i++) {\r\n            this.u8[this.offset] = value.charCodeAt(i);\r\n            this.offset += 1;\r\n        }\r\n        this.u8[this.offset] = 0;\r\n        this.offset += 1;\r\n    }\r\n\r\n    public write(data: ISave) {\r\n        data.onSave(this);\r\n    }\r\n\r\n    public writeArray(arr: ISave[]) {\r\n        this.writeU8(arr.length);\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.write(arr[i]);\r\n        }\r\n    }\r\n\r\n    public isCorrupted() {\r\n        return this.offset > this.length;\r\n    }\r\n\r\n    private checkCorruption() {\r\n        if (this.isCorrupted())\r\n            throw new Error('Save is corrupted');\r\n    }\r\n\r\n    public readU8() {\r\n        let value = this.u8[this.offset];\r\n        this.offset += 1;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readU16() {\r\n        let value = this.dataview.getUint16(this.offset, Save.LITTLE_ENDIAN);\r\n        this.offset += 2;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readU32() {\r\n        let value = this.dataview.getUint32(this.offset, Save.LITTLE_ENDIAN);\r\n        this.offset += 4;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readF64() {\r\n        let value = this.dataview.getFloat64(this.offset, Save.LITTLE_ENDIAN);\r\n        this.offset += 8;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public readBoolean() {\r\n        return this.readU8() == 1;\r\n    }\r\n\r\n    public readString() {\r\n        let value = '';\r\n        while (this.u8[this.offset] != 0) {\r\n            value += String.fromCharCode(this.readU8());\r\n        }\r\n        this.offset += 1;\r\n        this.checkCorruption();\r\n        return value;\r\n    }\r\n\r\n    public load(data: ISave) {\r\n        data.onLoad(this);\r\n    }\r\n\r\n    public loadArray(arr: ISave[]) {\r\n        let length = this.readU8();\r\n        for (let i = 0; i < length; ++i) {\r\n            this.load(arr[i]);\r\n        }\r\n    }\r\n}", "import Application from '../Application';\r\nimport Achievement from './Achievement';\r\nimport Decoration from './components/Decoration';\r\nimport Explosion from './components/Explosion';\r\nimport Overlay from './components/Overlay';\r\nimport Planet from './components/Planet';\r\nimport PlanetHit from './components/PlanetHit';\r\nimport Rocket from './components/Rocket';\r\nimport Target from './components/Target';\r\nimport Epoch from './Epoch';\r\nimport { ISave, Save } from './saves';\r\n\r\nexport default class Game implements ISave {\r\n    /** Detects if the user is using a mobile device */\r\n    public static readonly isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    /** Mouse object */\r\n    public static readonly mouse = { x: 0, y: 0, click: false };\r\n    /** Game instance */\r\n    public static instance: Game | null = null;\r\n    /** Used in `dev` variable */\r\n    public readonly Achievement = Achievement;\r\n    /** Rockets spawned in the game in the current moment */\r\n    public readonly rockets: Rocket[] = [];\r\n    /** Hits spawned in the game in the current moment */\r\n    public readonly hits: PlanetHit[] = [];\r\n    /** Effects spawned in the game in the current moment */\r\n    public readonly explosions: Explosion[] = [];\r\n    /** Decorations of the planet in the current moment */\r\n    public readonly decorations: Decoration[] = [];\r\n    /** Game epoch */\r\n    public readonly epoch = new Epoch();\r\n    /** Current game level */\r\n    public level;\r\n    /** Current game score */\r\n    public score = 0;\r\n\r\n    public constructor(\r\n        public readonly app: Application,\r\n        public readonly overlay: Overlay,\r\n        public readonly planet: Planet,\r\n        public readonly target: Target\r\n    ) {\r\n        Game.instance = this;\r\n\r\n        this.level = Math.round(this.epoch.multipliers.level);\r\n\r\n        if (Game.isMobile) {\r\n            window.addEventListener('touchstart', this.onTouchStart.bind(this));\r\n            window.addEventListener('touchend', this.onTouchEnd.bind(this));\r\n            window.addEventListener('touchcancel', this.onTouchEnd.bind(this));\r\n            window.addEventListener('touchmove', this.onTouchMove.bind(this));\r\n        } else {\r\n            window.addEventListener('mousedown', this.onMouseStart.bind(this));\r\n            window.addEventListener('mouseup', this.onMouseEnd.bind(this));\r\n            window.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n        }\r\n\r\n        window.addEventListener('beforeunload', () => {\r\n            const save = new Save();\r\n            save.write(this);\r\n            save.toLocalStorage();\r\n        });\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(Save.VERSION);\r\n        save.writeU32(this.level);\r\n        save.writeF64(this.score);\r\n        // dont save the planet\r\n        save.write(this.overlay);\r\n        save.write(this.epoch);\r\n        save.writeArray(Achievement.all);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        if (save.readU8() != Save.VERSION) {\r\n            if (prompt('This save is from an older version of the game. Do you want to delete it (yes/no)?') != 'yes')\r\n                return;\r\n        }\r\n        let level = save.readU32();\r\n        this.score = save.readF64();\r\n        save.load(this.overlay);\r\n        save.load(this.epoch);\r\n        // epoch challenge gives 1 more level per restart\r\n        this.planet.postLoad(level);\r\n        this.level -= 1;\r\n        // epoch cost multiplier exists\r\n        this.overlay.postLoad();\r\n        save.loadArray(Achievement.all);\r\n    }\r\n\r\n    private setMousePosition(x: number, y: number) {\r\n        Game.mouse.x = x * window.devicePixelRatio;\r\n        Game.mouse.y = y * window.devicePixelRatio;\r\n    }\r\n\r\n    private onMouseStart(e: MouseEvent) {\r\n        if (e.button == 0) Game.mouse.click = true;\r\n        this.onMouseMove(e);\r\n    }\r\n\r\n    private onMouseMove(e: MouseEvent) {\r\n        this.setMousePosition(e.clientX, e.clientY);\r\n    }\r\n\r\n    private onMouseEnd(e: MouseEvent) {\r\n        if (e.button == 0) Game.mouse.click = false;\r\n        this.onMouseMove(e);\r\n    }\r\n\r\n    private onTouchStart(e: TouchEvent) {\r\n        Game.mouse.click = true;\r\n        this.onTouchMove(e);\r\n    }\r\n\r\n    private onTouchMove(e: TouchEvent) {\r\n        let touch = e.touches[0];\r\n        this.setMousePosition(touch.clientX, touch.clientY);\r\n    }\r\n\r\n    private onTouchEnd(_: TouchEvent) {\r\n        Game.mouse.click = false;\r\n    }\r\n\r\n    public clearRockets() {\r\n        for (let rocket of this.rockets) {\r\n            rocket.entity.destroy();\r\n        }\r\n        this.rockets.splice(0, this.rockets.length);\r\n    }\r\n\r\n    public clearHits() {\r\n        for (let hit of this.hits) {\r\n            hit.entity.destroy();\r\n        }\r\n        this.hits.splice(0, this.hits.length);\r\n    }\r\n\r\n    public clearExplosions() {\r\n        for (let explosion of this.explosions) {\r\n            explosion.entity.destroy();\r\n        }\r\n        this.explosions.splice(0, this.explosions.length);\r\n    }\r\n\r\n    public clearTrees() {\r\n        for (let tree of this.decorations) {\r\n            tree.entity.destroy();\r\n        }\r\n        this.decorations.splice(0, this.decorations.length);\r\n    }\r\n\r\n    public clearAll() {\r\n        this.clearRockets();\r\n        this.clearHits();\r\n        this.clearExplosions();\r\n        this.clearTrees();\r\n    }\r\n\r\n    /** speedhack */\r\n    public getTimeSpeed(): number {\r\n        return this.epoch.multipliers.time;\r\n    }\r\n\r\n    public reset() {\r\n        this.score = 0;\r\n        this.level = Math.round(this.epoch.multipliers.level);\r\n        this.clearAll();\r\n        this.planet.reset();\r\n        this.overlay.resetUpgrades();\r\n    }\r\n\r\n    public static format(n: number, digits = 0): string {\r\n        if (n > 1e6)\r\n            return n.toExponential(2);\r\n        return n.toFixed(digits);\r\n    }\r\n}", "import Game from './Game';\r\nimport { ISave, Save } from './saves';\r\n\r\nexport default class Achievement implements ISave {\r\n    private static ID = 0;\r\n    public static readonly all: Achievement[] = [];\r\n    public readonly id = Achievement.ID++;\r\n    public isUnlocked = false;\r\n\r\n    public constructor(public readonly name: string, public readonly description: [string, string], public readonly reward: string | null, public readonly onUnlock: ((g: Game) => void) | null) {\r\n        Achievement.all.push(this);\r\n    }\r\n\r\n    public unlock(showIt = true) {\r\n        if (this.isUnlocked) return;\r\n        if (showIt) Game.instance!.overlay.pushAchievement(this);\r\n        if (this.onUnlock) this.onUnlock(Game.instance!);\r\n        this.isUnlocked = true;\r\n    }\r\n\r\n    public static unlock(name: string, showIt = true) {\r\n        for (let i = 0, l = Achievement.all.length; i < l; ++i) {\r\n            if (Achievement.all[i].name == name) {\r\n                Achievement.all[i].unlock(showIt);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public onSave(save: Save): void {\r\n        save.writeU8(this.id);\r\n        save.writeBoolean(this.isUnlocked);\r\n    }\r\n\r\n    public onLoad(save: Save): void {\r\n        if (this.id != save.readU8()) {\r\n            save.readBoolean();\r\n            return;\r\n        }\r\n        this.isUnlocked = save.readBoolean();\r\n        if (this.isUnlocked && this.onUnlock)\r\n            this.onUnlock(Game.instance!);\r\n    }\r\n}", "import { CursorStyle } from '../../Canvas';\r\nimport Entity from '../Entity';\r\nimport Game from '../Game';\r\nimport Component from './Component';\r\nimport Planet from './Planet';\r\n\r\nexport default class Target implements Component {\r\n    public static readonly ACTIVE_TIME = 2;\r\n    public x = 0;\r\n    public y = 0;\r\n    public angle = 0;\r\n    public hidden = true;\r\n    public canClick = false;\r\n\r\n    private holding = false;\r\n    private lastClickTimer = 0;\r\n\r\n    public init(_: Entity) {}\r\n\r\n    public update(dt: number) {\r\n        if (!this.canClick) return;\r\n\r\n        const game = Game.instance!,\r\n            canvas = game.app.window.canvas,\r\n            mouse = Game.mouse;\r\n\r\n        let mx = mouse.x - canvas.cachedWidth / 2,\r\n            my = mouse.y - canvas.cachedHeight / 2;\r\n\r\n        if (mx * mx + my * my < Planet.SIZE_SQUARE * canvas.windowScale * canvas.windowScale) {\r\n            game.app.setCursorStyle(CursorStyle.Pointer);\r\n            if (mouse.click && !this.holding) {\r\n                this.x = mouse.x;\r\n                this.y = mouse.y;\r\n                this.angle = Math.atan2(my, mx);\r\n                this.hidden = false;\r\n                this.lastClickTimer = 0;\r\n                this.holding = true;\r\n            } else if (!mouse.click) {\r\n                this.holding = false;\r\n            }\r\n        }\r\n\r\n        if (this.hidden) return;\r\n\r\n        const planet = game.planet;\r\n\r\n        this.lastClickTimer += dt * planet.getTimeMultiplier();\r\n\r\n        if (this.lastClickTimer > Target.ACTIVE_TIME) {\r\n            this.lastClickTimer = 0;\r\n            this.hidden = true;\r\n        }\r\n    }\r\n\r\n    public alpha() {\r\n        return Math.max(0, 1 - this.lastClickTimer / Target.ACTIVE_TIME);\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Epoch from '../../Epoch';\r\nimport Game from '../../Game';\r\nimport Overlay, { Scene } from '../Overlay';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport default class OverlayUI implements UI {\r\n    private overlay: Overlay = null!;\r\n\r\n    public init(entity: Entity<{ base: Overlay }>): void {\r\n        this.overlay = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        switch (this.overlay.scene) {\r\n            case Scene.Menu:\r\n                this.renderMenu(ctx, ui);\r\n                break;\r\n            case Scene.Game:\r\n                this.renderGame(ctx, ui);\r\n                break;\r\n            case Scene.Epoch:\r\n                this.renderEpoch(ctx, ui);\r\n                break;\r\n            case Scene.Challenges:\r\n                this.renderChallenges(ctx, ui);\r\n                break;\r\n        }\r\n        this.renderAchievement(ctx, ui);\r\n    }\r\n\r\n    private renderMenu(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, ui.height);\r\n\r\n        let logo = this.overlay.logoImage,\r\n            logoSize = 400 * ui.winScale;\r\n\r\n        if (logo.complete) ctx.drawImage(\r\n            logo,\r\n            ui.x - logoSize / 2,\r\n            ui.y - logoSize / 2 - 150 * ui.winScale,\r\n            logoSize, logoSize\r\n        );\r\n\r\n        this.overlay.play.render(ctx, ui);\r\n    }\r\n\r\n    private renderGame(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        const game = Game.instance!;\r\n\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, 40 * ui.winScale);\r\n\r\n        ctx.fillStyle = '#fff';\r\n        ctx.font = 26 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText('PLANET DESTROYER', 7 * ui.winScale, 20 * ui.winScale);\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText(Game.format(game.score) + ' score', ui.width / 2, 20 * ui.winScale);\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillText('Level ' + game.level, ui.width / 2, 72 * ui.winScale);\r\n\r\n        let upgrades = this.overlay.upgrades;\r\n\r\n        // upgrades are inlined\r\n        upgrades[0].options.offsetX = 180;\r\n        upgrades[0].options.offsetY = -40;\r\n        upgrades[0].render(ctx, ui);\r\n\r\n        upgrades[1].options.offsetX = 180 + 340;\r\n        upgrades[1].options.offsetY = -40;\r\n        upgrades[1].render(ctx, ui);\r\n\r\n        upgrades[2].options.screenX = 1;\r\n        upgrades[2].options.offsetX = -180 - 340;\r\n        upgrades[2].options.offsetY = -40;\r\n        upgrades[2].render(ctx, ui);\r\n\r\n        upgrades[3].options.screenX = 1;\r\n        upgrades[3].options.offsetX = -180;\r\n        upgrades[3].options.offsetY = -40;\r\n        upgrades[3].render(ctx, ui);\r\n\r\n        this.renderEpochGain(ctx, ui, game.epoch.calculateProgress(game.level), game);\r\n        this.renderRocketButtons(ctx, ui);\r\n\r\n        if (game.epoch.isInChallenge()) this.overlay.endChallenge.render(ctx, ui);\r\n    }\r\n\r\n    private renderRocketButtons(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        if (!this.overlay.rocketButtonsEnabled) return;\r\n\r\n        const buttons = this.overlay.rocketButtons;\r\n\r\n        let w = 80+4,\r\n            h = 80+4,\r\n            l = buttons.length;\r\n\r\n        for (let i = 0; i < l; ++i) {\r\n            let k = buttons[i].length,\r\n                fw = w * k;\r\n\r\n            for (let j = 0; j < k; ++j) {\r\n                let button = buttons[i][j];\r\n                button.options.offsetX = (j+0.5) * w - fw / 2;\r\n                button.options.offsetY = -(i+0.75) * h;\r\n                button.render(ctx, ui);\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderEpochGain(ctx: CanvasRenderingContext2D, ui: UIContext, progress: number, game: Game) {\r\n        if (progress < 0.5) return;\r\n\r\n        if (progress < 1) {\r\n            const progressBarSize = 300 * ui.winScale;\r\n\r\n            ctx.beginPath();\r\n            ctx.roundRect(ui.width / 2 - progressBarSize / 2, 94 * ui.winScale, progressBarSize, 24 * ui.winScale, 12 * ui.winScale);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0,0,0,0.25)';\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.roundRect(ui.width / 2 - progressBarSize / 2, 94 * ui.winScale, progressBarSize * progress, 24 * ui.winScale, 12 * ui.winScale);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgb(218,255,55)';\r\n            ctx.fill();\r\n            return;\r\n        }\r\n\r\n        this.overlay.newEpoch.text = Game.format(game.epoch.calculatePoints(game.level)) + ' EP GAIN';\r\n        this.overlay.newEpoch.render(ctx, ui);\r\n    }\r\n\r\n    private renderEpoch(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        const game = Game.instance!;\r\n\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, ui.height);\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = 'rgb(218,255,55)';\r\n        ctx.fillText(Game.format(game.epoch.points) + ' Epoch Points', ui.width / 2, 36 * ui.winScale);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillStyle = 'rgb(127, 148, 33)';\r\n        ctx.fillText(game.epoch.count + ' Epoch', ui.width / 2, (36 + 24 + 4) * ui.winScale );\r\n\r\n        for (let i = 0, l = this.overlay.epochUpgrades.length; i < l; ++i) {\r\n            let upgrade = this.overlay.epochUpgrades[i];\r\n            upgrade.options.offsetY = 130 * (i + 1);\r\n            upgrade.render(ctx, ui);\r\n        }\r\n\r\n        this.overlay.startEpoch.render(ctx, ui);\r\n        this.overlay.challenges.render(ctx, ui);\r\n    }\r\n\r\n    private renderChallenges(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fillRect(0, 0, ui.width, ui.height);\r\n\r\n        ctx.font = 36 * ui.winScale + 'px Ubuntu';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = 'rgb(255, 55, 55)';\r\n        ctx.fillText('Challenges', ui.width / 2, 36 * ui.winScale);\r\n\r\n        ctx.font = 24 * ui.winScale + 'px Ubuntu';\r\n        ctx.fillStyle = 'rgb(194, 43, 43)';\r\n        ctx.fillText('To complete the challenge you need to start new epoch', ui.width / 2, (36 + 24 + 4) * ui.winScale );\r\n\r\n        for (let i = 0, l = this.overlay.challengeButtons.length; i < l; ++i) {\r\n            let btn = this.overlay.challengeButtons[i];\r\n            btn.options.offsetY = 130 * (i + 1);\r\n            btn.render(ctx, ui);\r\n        }\r\n\r\n        this.overlay.epoch.render(ctx, ui);\r\n    }\r\n\r\n    private renderAchievement(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        const achievement = this.overlay.getAchievement();\r\n\r\n        if (!achievement) return;\r\n\r\n        let p = ui.winScale,\r\n            w = 500 * p,\r\n            h = 108 * p - (achievement.reward ? 0 : (16+5) * p),\r\n            x = 20 * p,\r\n            y = 20 * p;\r\n\r\n        ctx.globalAlpha = this.overlay.achievementAlpha();\r\n\r\n        ctx.beginPath();\r\n        ctx.roundRect(x, y, w, h, 16);\r\n        ctx.closePath();\r\n        ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n        ctx.fill();\r\n\r\n        ctx.font = 24 * p + 'px Ubuntu';\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fillText(achievement.name, x + 16 * p, y + 16 * p);\r\n        ctx.fillStyle = '#ccc';\r\n        ctx.font = 16 * p + 'px Ubuntu';\r\n        ctx.fillText(achievement.description[0], x + 16 * p, y + (24+16+2) * p);\r\n        ctx.fillText(achievement.description[1], x + 16 * p, y + (24+16+2+16+2) * p);\r\n\r\n        if (achievement.reward) {\r\n            ctx.fillStyle = '#fff';\r\n            ctx.fillText('Reward: ' + achievement.reward, x + 16 * p, y + (24+16+2+16+2+16+5) * p);\r\n        }\r\n\r\n        ctx.globalAlpha = 1;\r\n    }\r\n}", "import Entity from '../../Entity';\nimport Planet from '../Planet';\nimport { UI, UIContext } from './UI';\n\nexport default class PlanetUI implements UI {\r\n    public planet: Planet = null!;\r\n\r\n    init(entity: Entity<{ base: Planet }>): void {\r\n        this.planet = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext): void {\r\n        for (let i = 0, l = this.planet.layers.length; i < l; ++i) {\r\n            let layer = this.planet.layers[i];\r\n            ctx.beginPath();\r\n            ctx.arc(ui.x, ui.y, layer.radius * ui.winScale, 0, 2 * Math.PI);\r\n            ctx.closePath();\r\n            ctx.fillStyle = layer.color;\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(ui.x, ui.y, this.planet.centerAreaRadius() * ui.winScale, 0, 2 * Math.PI);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#e66';\r\n        ctx.fill();\r\n    }\r\n}", "import Entity from '../../Entity';\r\nimport Target from '../Target';\r\nimport { UI, UIContext } from './UI';\r\n\r\nexport default class TargetUI implements UI {\r\n    private static readonly PATH = new Path2D('M.2952-.0401V-.2993H.036v.1074H-.0401V-.2993H-.2993v.2592h.1074V.036H-.2993V.2952h.2592V.1878H.036V.2952H.2952V.036H.1878V-.0401H.2952Zm.0713 0H.4958V.036H.3665V.3665H.036V.4958H-.0401V.3665H-.3707V.036H-.5V-.0401h.1293V-.3707h.3306V-.5H.036v.1293H.3665v.3305Z');\r\n    private target: Target = null!;\r\n\r\n    public init(entity: Entity<{ base: Target }>): void {\r\n        this.target = entity.getComponent('base');\r\n    }\r\n\r\n    public render(ctx: CanvasRenderingContext2D, ui: UIContext) {\r\n        if (this.target.hidden) return;\r\n        let size = 150 * ui.winScale;\r\n        ctx.translate(this.target.x, this.target.y);\r\n        ctx.scale(size, size);\r\n        ctx.globalAlpha = this.target.alpha();\r\n        ctx.fillStyle = '#fff';\r\n        ctx.fill(TargetUI.PATH);\r\n        ctx.globalAlpha = 1;\r\n        ctx.resetTransform();\r\n    }\r\n}", "import Application from './Application';\r\nimport Achievement from './game/Achievement';\r\nimport Overlay from './game/components/Overlay';\r\nimport Planet from './game/components/Planet';\r\nimport Target from './game/components/Target';\r\nimport OverlayUI from './game/components/ui/Overlay';\r\nimport PlanetUI from './game/components/ui/Planet';\r\nimport TargetUI from './game/components/ui/Target';\r\nimport Game from './game/Game';\r\nimport { Save } from './game/saves';\r\n\r\n// Achievements\r\nnew Achievement('Level 10', ['Reach level 10', 'Easy start'], '+10% rockets speed', g => g.epoch.multipliers.speed *= 1.1);\r\nnew Achievement('One Million', ['Reach 1.000.000 score', ''], '+10% score', g => g.epoch.multipliers.score += 0.1);\r\nnew Achievement('First Epoch', ['Get your first epoch', 'Prestige at level 100+'], '4x reset speed', g => g.epoch.multipliers.reset /= 4);\r\nnew Achievement('Level 1000', ['Reach level 1000', ''], '+50% rockets power', g => g.epoch.multipliers.power += 0.5);\r\nnew Achievement('Evolution', ['Reach 1.000.000 EP', ''], '2x EP gain', g => g.epoch.multipliers.epoch *= 2);\r\nnew Achievement('The End', ['Reach level 10000', 'At the end of the game'], '`dev` variable unlocked in console', g => (window as any)['dev'] = g);\r\n\r\n// Rocket Layer 1\r\nnew Achievement('Rocket 2', ['Reach level 3', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 1));\r\nnew Achievement('Rocket 3', ['Reach level 7', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 2));\r\nnew Achievement('Rocket 4', ['Reach level 15', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 3));\r\nnew Achievement('Rocket 5', ['Reach level 25', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(0, 4));\r\n\r\n// Rocket Layer 2\r\nnew Achievement('Rocket 6', ['Reach level 40', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(1, 0));\r\nnew Achievement('Rocket 7', ['Reach level 60', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(1, 1));\r\nnew Achievement('Rocket 8', ['Reach level 80', ''], 'Unlock new rocket', g => g.overlay.unlockRocket(1, 2));\r\n\r\nconst app = new Application();\r\n\r\nconst overlay = new Overlay();\r\nconst planet = new Planet();\r\nconst target = new Target();\r\n\r\nconst game = new Game(app, overlay, planet, target);\r\n\r\napp.spawn({ base: overlay, ui: new OverlayUI() });\r\napp.spawn({ base: planet, ui: new PlanetUI() });\r\napp.spawn({ base: target, ui: new TargetUI() });\r\n\r\nconst save = Save.fromLocalStorage();\r\n\r\nif (save) {\r\n    try {\r\n        save.load(game);\r\n    } catch (e: any) {\r\n        if (e.message.includes('Invalid'))\r\n            alert(e.message);\r\n        else\r\n            console.error(e);\r\n    }\r\n}\r\n\r\napp.run();"],
  "mappings": "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",
  "names": ["app", "game", "game", "save", "game", "game", "planet", "planet", "planet", "game", "planet", "game", "game", "game", "game", "game", "game", "game", "planet", "NewEpochBtn", "game", "game", "save", "game", "game", "game", "game", "NewEpochBtn", "save", "game", "save", "game", "game", "game", "game", "save", "app", "overlay", "planet", "target", "save", "save", "game", "planet", "game"]
}
